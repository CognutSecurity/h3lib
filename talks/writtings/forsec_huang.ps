%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: forsec_huang.dvi
%%CreationDate: Wed Apr 17 09:49:41 2013
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Medi NimbusRomNo9L-Regu NimbusMonL-Regu
%%+ NimbusRomNo9L-ReguItal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/texbin/dvips -o forsec_huang.ps forsec_huang.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.04.17:0949
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B69181EB37B03DB01729C5792E161A36
C6E44CEC46B305D67ED9C1B6B70F67108B948832B96F47F1E55E05DFF5403C5D
21BE08BB792A1C13CB29EC7BBD21E4FD09D99D2247D1677B9620CC663123AFB0
C69E3057F34DC891DE960199D8F17D48B862BA6A61D648FABC1C7B0B4E5883BD
24D106382A82EF4900A17829C8A8DDDD4C5A0E4C44FF6732B5B95A45847D1BDF
852FED978B14C38102BFD0E48771D4C7102E50ECFD9B5EB798AC88474448B260
91BF6EAB240A5A85971093E11B63B16054C2F450587BFBA838A12ABE23EAABF4
3DB16C4AC4DE06354A28409B5F47FCCE9C3E73DCE410A8F962F7879D063B8B80
FF811036A99370C24B174AFC399C46C1426F4FF72A744B8EED9375BA41440ED6
8F54EB151A227A6A71F3D480BA152D4448D4AD4B1D91CA52CB6583FA4C6F64BD
28EC6F839F95D74E2AA63EAEB35FA5C74AAE3A3CF4BF3E3E7E1F8D696AD677BB
F6B25A4E52E70E7E76B5CFEEBCD454B0495D1056C57FE64B4D449EFC540F7CAD
8DDA990A4E2CAD51699D7697AEE2265047DBC98A857B183E3D2AACF079C52025
F12147C5C8D5E39937B03356D453D819AB09EEA8508FD5B9E01F4C2302DA5F00
5F18FD3A578AC6AFA1A63A4E6966BB1DB680E694FDD4B8FC8D55884ACE1EEB5B
2F34911722D69978363330866648B75738A5C8A2978270D90A6E4ADCFC311D05
24F66D134D88E99148322BDBD23E57AB1F76E9859D40AA682ECCAE43702CA0F2
57C62B3AF669A8D179C8FDE6AFEAC34BCCFB04A79CDAC72C5E142A2D0CDCA4C9
DD02E7010AC32271FED250A68D4241654F171048399787217BCF5BAB0D31D99F
3C202C277B9CEFFD6DA61EE997A91B92E82635B2542128BBCE02EE3902A286E7
ED3B553648F7018BE8DB1EFD7ECB6A9D8CA938A79C81B5A58AB3D2CB7FA127F4
9BD2B5ACCF7ED80CEF4FE96FEA411577D7CC62FDEA43428C6F79C332342E15F7
5B08A29FEB57AA3DBEF8671AACC34F3E4C8B7F07ABEA1BAF77758B40E87EFB94
7F6EF31DCC61CDDFC39A2771832562582BF4A17E92DFB106520F5C74630741BC
6EB8CB79335D6145863EBDF0C4ACCD2E98D1D7F8280BD32C787DE06908B02FF9
702BDC8C38AB822AB24B4C31EF0EEB8EBF2EA84008E235FCD21E4F39428FBAE2
234AB63281D92F3EE6EE802E4510D5B28CB7417443A05B7B92D0D69BFF151D10
6D95C544A3F028570F9BFA97F75C4A7A9C74D6A713F50D6CE2E74E8B47BE08F2
1DD96632E31AA1552D1259579515FF679A81018CD37AF944D326EDDB70FEE857
B86AB819711518FEA6390D86E9B7AFF941B62B057DF67545FD2BB1E236BD78AB
0AECEAA371A889F295D5D71C6A3C2BEC7282C38C8779CF36A22CFC65FD9B1E56
B86DC09A5A21B2C02EB6DE9DF27645FEBB173400073C230F4BCFB0C3250E81B7
8AE3D2579C577B6D816FAD971067C745F2E433CF9879B17762A428C78744582E
EE77815D47CD6A5B2ED1DC997146A22768AC82C7B98A1BC747926594AD9E1914
F07F659282255057A4BD4853FA4CE67987B33418E42C97FF011DCF5A74F5D7E6
3480C40196082485DFE88C095D46C253252AF7805CAA06ED8D2DC700CB778211
3A1C2469DDB654DD3B8014FC799FDEB436DDAD0590DC5C93FF757AA9B57D47E9
00956CA6EF6FD2B82E589D5FE2407D5C42190679A0BA48FBCDCCCC03D5E47D40
8BCD5FDC44C1AB9BFC458FF53EAF747A2E8B205F5843E2FF174E8C620AC9A834
20AD9336AEE9AC2234CD8FA0168932A3085F0C0871D6649EA781082C1D132E35
E332438AEB9C0F6752AC027D4BBFB46C47C4307F30022E026D10AB4FFBF96035
5836C70BC60241DC5CEFA6190E619EAF598CEB4AA0BB12AD911BFFC2D5569B83
C3E60E7D5DF243A1FE86147C048B07CFE453C8070B0CC35C26E83223783B833A
70CDE99CFB059F74A670F8B7E5275582F7A29EBD603145A82BD558AACBE2337E
87EEA5DC720C53EA4393648881DBB4C9005F56BCC025B22B2276C87FBEE9DC5A
F95C9A005E086914165CA3CC44FF36163C817851DF3DA72DE6C083E4FDF42A54
520864E06191CDF82673BB21073D7A313CDC5FBCB16FF1571FF48BB730A0AADE
BEA9D1A4C30F51E9B375D24D089EEF4FE32A90099F97D70AF54E554A8F28FDAC
53748FF1ADF074DC7501DE9DB60CAD2D55EFA306290781178780D2FE9BBF3F5B
187D8321A0A21D2271C7FAD646EC17D404619FCA686B5792D720974ED9249ECE
9FE8FCC56B051849943A7F116E7BC9E4FB52044CEE316E2F0AE3363BFD0D1421
7EB9F2CB21F0FF6087C7308074735AAA290657D25871E3FF8BA39AF92CD7DAA1
8888C8F95DB50264F98CB091B751A58D4412A949B9E6E8CBCE0CAB42267C94FF
60FB482B26DB483FCB8E97F39B4733E5D798A70D15F48C2F617CE0AD7A400708
8A67B9AC7CD6479A34E1B75657B41FFDB8AF1C9E3D3CE95D814EF0B0D02BE90F
7DBBE47A336603D97A6EEFEE6275201B51613B637F19614B325834FA293E3ACB
586C1CA900FC92B4444C7DA9C643C353BAF615279C428DEC23A2B17C23A0AD5D
5D8DAFF34A83BCF96FEB0DD59EB53C4739F1FF1D61A3392B13C2BA2F4CBA170B
19B873A60F5C55626F5C6488D48424F4F52A972DB9B7851E6EE24A7B97B55AA2
8B5715D51309C3E5E224E0D7BC65E6262E631C86D65D30A9C8FA4A5620919680
E8C7EAFAC4E15009A35D4276EF02751215C71817327CCE0B1F4359517F7CA06F
53F1C1651BE6CABC45C5E8EF23672169A1F5437ED95FD93F572D081AA6998864
384A0FA67D29C5BEED30F6138B8CD89EDEC97F15A8EB19C2FC944B76436E57B4
A7A572179B1C9FDE262C82B6F01DB7021EA5364B68670ABA0A8184FAEE5DAF99
784261E84C97F533A5DA8B4B245714A996A44D8DE9C349D8A2A7EEF2D2CBFFA7
7D88827236660260C19CA8BAEECFFB2C41C4A87F5C1F45E5BEC496373C3FE0F4
2DD14EFD10251E69BA5F423D89991BAE6CAE8EA99AB61E58A2904FD702766B36
916DBA8F9C96141BBF4788FC2559CB14E22749372883A262140C4E6714F5D76B
B2397E0398E95CE5FDF7ADB2965D6181D0094FAE82543DB61842EF56F134AB25
DCAD2BD08AE61E233FE6FF679790106065F2F956E07BB110F1D7FF4A5199B539
0A92424B3BCF60A5112A8F05E7258AD6BD59ECA92644D7496882273FB569F825
4D556F1DB811384DE04BE0D551DD326E58FE258D0E268FFFDAE1393586EFD07B
A75348EEE15DFFDA2503C44772003487DAAB5D9733A0A9673990B72A07FDFE82
010723109906EF64F101ED58B05FA74B94FD084CB58F31EBFD5EBC6440454BA6
89194994A690FF0E40EC09EF43CFE4C05C80CDD6C3AE03D656334D7A3E9F845B
49E2E0C1B754A67D03DD31FC5004B5D058DAB819A598FDD297C4DD1199E2041B
580D90FC41964E125793BF08FA21B4DCFC453DEFA99DF6E8E6952D58E274B639
AA8FB5BFCF46FD86F73CA892135F6AF2B12E3D24F6FA211ECD6935CC1E33D035
F0977B551755841A79A276537088089FB16A8F63F737F7055905FBC82D9FD8D3
BC05DEC6189F61AC035BF39D64EE9A217E69DD45C491103B6C2D4C14393B95D1
2FC9F4D36F5633F1AABAA935C0E086E03D6A47EDBE0DC8DB890D11D20E3BB9EB
340B4E1A110BF7EDA0C2F226E1D48D900480DE1104BB31BE8AF5ABCB55D2B619
42517CA5DD56519A5BA815FB9CE58B4857551BB7CE3C16F3F36D0E05B44E50A6
85C94D9627E275FC30DD1633B57313BBF7839FE6F280EFC242ECD53B6DDE463A
F5B7099E35FA38C2095D33527EDB7BE5014672805793187103094144736E354F
FE82D20D3A12A0D78B3F5745F17F13DBED51E9B525318151699A16A56973D00E
9966648AAEAA294473A09F7EE2D6B47ADF3B3D7DA34094E184A8F7618DFEE307
30EC8260FFB8B99842F6B903910ACAA09DEEFEA446076751252373037E3E9BFB
C25B2D542BB76814290BBF98399C2EFA56FEB00E72E106F7A5916D68EF2E33F3
1570810CFAA3610045381E3FFF2D2FBA3063483F9E8F57946B3FFAEBF3970D61
80CE16EBE8021E7A49B60731ECC71B411C533A5CC6E235B63CEF024C8BA2929E
5115ACD1BA614FD05F7E2D2EB22975A5C1C9F03C78A593F6F334A883DB51F4FC
23E31F56EAE5A1B023DEE119BF95751932C970E0E5344749145A446DBCCE6B96
3779D984F71AC6EC6EB5B98C4746CD47A36E132B463D006222C9129603E3ECD9
438E522002E58827D4E81AC7C93F117B284558CFCC55F34CB74F5EC06EDA2305
AEE6B8713DCCD1B863BC5013FB08C67361E6411AAB9A60C2FDF1D3759ABCDA9D
B4FFB4CF705CA9FB970AB58740DCC4BA984CC0CFC212FCA06A6E60576765F258
EE0F404F6914F4E7FC38EB3FCCD89B8CE8CE4E88403160EF151E461AD28A9416
FDDDE0A9B506FF1B1372E3CD59FD9F4E64D961901A16644F8AFCC6540A5FC8BD
0199394D91C7EC0AA568074006697E6CB314BFEDC71D5F73DD6420A77C6AC43B
A78DCD965F1F340A8D3F2B0E10531B00EA8BF680C9721269D4488CCE0A54D057
D9A249AB0CDDACCC83918CA9A4862CE7BB65CF8A58DE8E9274DB17506E627A97
A3CE8303F1F1F68DB007AA681BF5CBE76792E1750EAA9580929D314E5509DB0D
17C27FE4F05E7F75635BF3280A5EB34C473D85CD9407712CE6779B5400A20093
C331D97735FD62EB9FEFBAD6F00373ABA770FBB46DCE78EAE1D248A0ABF21AD3
081BAD02BBD291001EA56B8BF54E5759DE60C11E304ACE0DFC2C8EC9F38819E6
BBA4C015D0E309E3088712E8C4C96002C15A0BA290231CEA7AA5D89EC5837E98
58DB577E05B4DF958CAA6056992B35822BD552E04CE44317096B64954B78062F
6F90C2B0F05CE5716EE5C05E811FC4770F9CCA4BB8AF67C137F35F9193F12010
B7150795CF2BA78D4E5C545DB7CD7B6E984DEE494A7B01B637E77EAF484C2615
F826C658B30905B56CCEDE37F37167FBCFA2CC9AF628B6DF7AC21D9B88457317
ED0F6CF9FF5A2907997EB1484B869E8F2E92C0A1800E4FEEF56442A7D369BB94
6BD058A0C86C794435410641BE26D2B060C26316076330CCC3BD6A1158B900C5
0476599191318944B0C7A36D4B89206C6935F6039E63E2F0B6B13E4D1C9E80BD
B58231F0B8E09D136774D897920BDECB5E57CD5695F90B66B1701398FB3C20F3
7B5603D545CC0D2112788F2C7AB8A8026A725FA8752AE968D97BDCD03276CC54
E1408F732DC7554F2DB532D0219C5EC770C8A621F60398DEDA05D05396235E0E
22F521DAFAF15EB3C09BD2D60ACAB7BFF9EAB5E6E856EAAC5074DD9959CC5CDE
05CA9B188923FC6CA79B0B5AF83EF06345C5A43825AB1CC1DCE1FE0B9AEC28EB
E10442617854EF0D1BDA3DEEDEFE14FE7C6D241599122EDB8058CCB82220C16F
F2ECA8BCB0BA8E1046CED89E36C15FC9B419B8E6AA36710627083DF44E67236A
D98F65BE7EFBB56DBACDE2E6BA117756E2F4B786FCC036F671C6164F5D9A745F
DD8147903920206EF51E132BFDE37CABF5A0F5C1617D25F791F968002EE5CF60
C1BAEEC22BDA11CB0330145925BAEFA95D98B724EF3420535AB02486409FF1E7
B3A9E18999CCF91BCC71CA4AE57ABAD4C0566F9E7573D9BE0F9DCA7EC762F3C9
6D7EA3AB5422C5A56CBF02FE404D7B40B6CE001EB5EE8A6CF9F15BD011C83790
EEFBA1C76CE57250A31FF94D912F0167A1D9DD0AE88029F12AC8CF82B74A8832
9C284D8CEE98BCF14EC6F67906524BCDCD73EE4A797D898CABB8BB108BC67FC5
088A79FF87F80D8F86934714121B46D6323843FFE132EEA49E11D6BD6E0DCEED
C1F83BA2044B1C0EE6096E008AD67226A9ABBB491C413EE1C718F1B3F086E1A6
0D9FC3B6967B01ECFB5C1CBF8B16EEDCBC9F34205E5DAC91FDE32B2A64F2F989
A6D71947E6F0E8BA345D933DBE5349D7FC3FE8E06FAD917F26F783D866259C60
661FA0DCC0DE919DC0AF96A326ECC5C1404F5856C8AADF36E2BB43DFEF452358
31CC9C6DBE2F4C9CC41C9D28102B219600EE640D4804ABF1D02AFA91F08097B6
9CBF80BDE0A289CFE5908520C8664151081C696B4BF2005366DE757D161FC4F5
1766539046288D9C33E405BD719B56093FC7DBF813A96D33FC72965363CA49F2
673DFFCB03E71ECD5EBDBBE63A7C5AF98245D1E1B64ED316D8E1AF73CBFCABB3
DA905A20FF852BF766DD0C24BE8B0B2ED19410B15C8F6836E3CD323B867C996F
4D578D6E9586CB14B4604106F2FEE9E418AE444820ED03C175F2123FCCBD73E7
09B7A3F7234FDF9DC7E5FEAAC6DDB8686A0E32165408C5C8A7F7D1CEA2714F8A
8E40BB3FA0159EBD547227A30CDE0AE1850BFD3ED3FD13DDCDC67F3FFF6E0076
51F3FC6231EF34FD88B2562728D6FC7DFC0A2805FB21DB6E23C6DB5E6D54976D
B982CAD19FCDA253D99EF0953DD389695A37FC1DA9C71723418B118C42B0F7DA
C95B6645006FF914780EFA8870D345F0D87796252823CC2260E58A7296FC7EF6
8C17B43A9DBCAEE0CDDFA60D1C41E5D2321D9C8574CEB68B730543071E483CB9
3AE7047D2AD7C74E44AF65D2D6786864691E679001580FF5F0D840032F95E312
00936826D4C81532073B1C3269B051CDC65A7C3E39286DCA873053EC5CD0F2EF
EBF647A77BF24E0246B02B66C67735EDFEE88128D911D98AC14D8345477E575B
65B015478A147FB0CD1553CADBC0BAAB74DB2259E896E06C7E89345BF43BFDDC
945F3AC7096A5363F31B4412C1F5C9927BAF740119187A1294CD766AD0375FE6
B1B6BC330D791338562681098F69A4CE3A582D0394F432627C36900DC2611FCF
84832E018DD8247B43D407CF59D33F9FD31E09AE6AD525F49A73AB763E3B857A
6DBA109E656137045F0CDD2A6B36A389DD93E2BF68C1B4FFC8004CF5A45A2B4A
B05B38721AC81B020690AE3DFFB38C401DAEFB06CFC42B01FB3B663F4EA78956
3620C37294DFBFB0F08A8CA287D70FC90221C3EB050D718259F1273F805F2CCE
D3EFAD8C93D38E28F56C12861ECB2BD13E602DAAC235A4B2C0E6669C53D4F958
79E58E7E399A1B1FEE57DD85547B57817E9B5930915E1D7401157E17D81FA63A
CBDAACBC22114E8840A2337CA2F141E1D556F19634B7BB944EF06EA487E7FF14
BC5FB953FE6B2562D06B26E6AC9D3DB40C4B4ABB8492FE1B3DC3B7B2C2AAB1EC
D5328977A2F5D9D6389377ED4DAC5E53F408F54B5DE56E517BB9461E16F687CB
AF3E4B1B175E7089CD5FDFB7684EE6F6B2D167B9B4DD0891FB9C319D5E1D6A13
3C8A7121925EE89BF83550E2B988424C461F48BF10A32B35F0671215E6BA7DDD
334E73B9E5D28D616D0772C495B6E213CBFA42344A2A826FDB0174B92F6E875D
0AFB66BB38A92B70B8ADBD01D7922C4447D9A6674F0745364ADDAE15D5E39800
7FCA2E76D92509264B8987067DE6EDFAEA7567A7D849AAEE103C86504D181C92
BD977F993D3F987CA21266B87C838592D497081C027BCF52BB8C6ACDAD1B49DC
B03267A9D03D2A38B8CD430EF3415CED5A285326B9EDF919F6735B7134E73BD3
6B1CBB8CCC383E5403F0A7A569214E6BC636552959343DB6B00C4597C5ED4201
C4FCB684F78E2D5567CBFDE3DC228BB8131AC76037AC74805E5C0DB87CAC7ABD
71EDF13DF610C6F31A3915A1C3A46CF6E90D93432B8DE9093E7B650A810CE29F
ECE873C5E8248B11741994D9E82E4C6D3007E345AF08BE1E48E50A79BCA153C5
561E77DA23D67974105B0D2ACB64A98010C515BF7CF31E87E4F18420B803B8E2
E28C320474F64E7783491139CF2F7BBEDAD421552A4C36C37372C4D3D21FF716
74554F9A83CA62318AAA5D437E9F11BF47F682F2B1C04E3670A442606782F2BB
8A9226D7F263D106AE86433F77F345B1EB3B7E878068E8C22090041758D89091
914105BF64402B53B51316F7A3D080DE8FDF090544140C035BAEC24C571A6818
C3A94B04B9580B99F339730F39EC243178F6195721C8CAEFC36827944E7B344A
D29418E1BEB06CBCCD4BC4E9E86C29C2723AE1293C8A1AAF52FD278EF5443AB6
C70B7F373E09E3AB8AF0EA1852219752147DC020C0E61FC323B510F6A89409CE
72A1486E30A31028D9887C903CAC90E5E64FD8F8AC3BE716662D99C0E31CBD98
CC569888A3F3330B70759D64A268C587BEDF1EDEC1A59C682895D06C34EFDED8
32A94CDA34E3BD7EF1CBA472270BFADB674DEE848B5AD163EA162E961E7EEEDD
F7458209592E8E94FBE13DF37177D7B7A8538E47F0EBB434EBBD042DE42FC72D
D6DA1C48368972B8F356C6A737317CBF0911BA05C406049349EB405F8E56E691
B088B6A8790775674667B9265A4D0EF1F9448376F91F29A0DA74C5F66955F519
075656761D411A399760049BB05A39B12E9D44098E47BAB261BE20E7E4CAF0C3
BF7D90B65997EBD308E2F0FE364D774DE1AD18C6F730163CF6D21F93DF85DF5C
B5C1F083274F2033FC6E59580B178A906F5DC2A5E2EB6504F692EE167B4B7ACA
F3F25B87B75D65CD1F36407E85025B1290943631C0EA8B4C3DFD3F101D340965
F2F700F5E0C957E5A192EF5CF6B9FAF73030EBCEA146753553A4F5EA75AA29D5
36AC5FEC28232C66572036175CC0ACACFC14A07F490776EDEA90321C2241C980
265570A421A82E8B1698A250895437850967697E1188C26DD5D9A32F1CC3FCFD
DE1C3877469E1E2868C3251CB4AF3C85F811AA7161AF76CCCE498C4B5B29ED68
A449F73DA793DABE06ADEA917150A833E001E401ECC253B12A01A6CFCA17213A
FC8E45BCF263CC096721047573242FCD56DB62842E81B3A6A10CE5DE239B7672
47CCA25C1D452588709682C2B9B409C4AE7AC5059734CBB915E95EFBDDDFCA39
57D692700633ED19D2A307F6440C72034AD5EC188D0777875ACD58F3E533B729
D44D96127C50D91B57303FE93280F459730427DC080A6BF053DFB0E4C7C34DF8
859CBBB3F302F3AB0B9CC41ECDC447663CF12AB91D0A7C01941930254C4D3AA9
9FCB37452617A70CDFCE6846B41D369EE4D20389DD6DEA5AA2C692CB5BD040D5
675F72252AE97E2507EDD79BF25B89DB2D469B7C3F850E4F96C9C55F7F778EED
6913CE70B0BD51491E0229A60D8F31AB50BD8E17E3C7BBB073D55A034CF29133
0072245973F0FFDA8660482CD05EAF790454264EEDE2A9C2A135EDB082C032E9
C66636F08733518641D6E4B82DDB6339371743E452F2F921D1277ED86701F1A6
E5B3093D9CE3EB8C164AE2D1D7FB594C5477C1C4397C34EDBAC4F133F4A538C7
92F431E38838D42F3B8C200FC36B7230222EC7F400BF157E9031CFF8FD88327B
592A16B45DECC0B45725297F35B9312782BF4B0EBF2A8ADEB8CC48205BBB329D
737CB10C9664F91AC6220D13A1128DE6AB561446134AC6D08BFF56BC5C95D9A4
DCEC261C3CE14538C0AFF0025C8312F893829DD924998A4CF6405D0FE629777D
BF4EEA9DDD1573B7210132EDF87943EEEAB412B8B40932F7F6C96FC7D6D2E70E
629BF65BC95D2B38731DC379DAD75D638B7DDB3797904F2624DB578B7950891F
C9ED3DC9FF23144BFD75E7FD9279D861E7D31558B432ABBFDF0211119DD5E386
02001C8F536F64C08738EC00DD1B7A62642C0E89E79C6AAC2ADA7AA9F709BC9A
7EDBD76D36A1FD6C4A1B7FB275A94B4395CB6BF1F03C912C00CBAFC82730FE56
F6C164D266AA93D51F73A0292A2C2F11E82783BF8CE4FB598A06231088D37ACB
9549FE572B7167274C3FABEE1E6CE64F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD85F4DFDA1A69D18A
95EF6E1C8A6EFEBAF9D3D0CBFD6FA67EA64945440BE6F34771C491C607BFB199
7469D73961C0E8DAEC14FC13ECF37514DBF9C5A991943BDBF66C0ACA84BEDF8B
54AFD478D9695FCAA0E4FA51CC6C3A84D3D5904EBBD089B189203DF7239A2394
F2B5338FB0603488E278EE68F3CE7397B142062BCD6A62AFF936B2ACEF919E57
21FA55672F22685B5305F5E84900C327E20248F7DDEC431EDFEF8F922EFEBD58
EDDA265414D834391381C29CAC17FACD0A2F071460BE0D3DC7F6450E768DDF4A
D39B8E27065A8D236EE9643C209A36CBC8AB1D87C7B3FDEAEBE82AC779558FA9
15EFAB7C582B6CFAF3F8B174B1223D531067BA929EABBE1404DC599682276A0C
03309EBD39951A398883FC919A711E8E891F64657D64B43EAF4ACBAC482D06AF
D458F0DC3F4885030096DEA6AF7AD28E2DD526D66EF00BB3F4970C162A20E2A0
3AFFF9D6B0AF70E1D643784CCA5F0B76FA16D597879F762BF7CE394D18DC76D2
06301A735F3377789FDAFC843F9B3B635BC7871DBCF2B8BE5E7E6290AB1C4B10
165DE8C3E9109949A8FC60CB19EAADBDA8CE8FA7FCCEDE1BD4B8566A268801A7
2428B8193F4A9F02506DAA39886CAC4D93D6E6823E197EEFB4A340040C1C50BA
4952CFE767074B3615FDB279B9BCC0993871E9718A75DFFFC74395B532A58983
B7E3AB32A13A3DC4FAE0E34E485C31FB2952DAD2A611798A9B23C8C0EE5E1CDE
0C9307615D2E9E878FB834D9FAC5D75DF9C35CDF69EF9B3A8CB135C7722D415E
7E2706105A9C525F3B8816B0196E9F12636472F5845AF507937C0D6B5A9FAB91
FEB3260A1B119B4616703C7A02421BE4F6FD230086F1440BADBA4D67AB94B9AE
A4610A677E5847AD059551C2C0D11DBCCFB1B9657631C34E9374ABAB9645CB8B
AF03BC18D41A89D98DFF1E1AC62FBE8333BC44D2B83D65BA382812971B458EDC
4A896302D0BD6960EC93B33505DF478BDB6BC5FEEC5907086772F4BE1CBA7691
480D037E344259421DA14F1FE0237FA942778DE411A2DBA62DA32A517D50C8CE
6C8C9F8C6B78723AF91881416DB353A4EC3E07F0916717AB6C06FA8DDF547C0D
626117ACD4000D71140AE11A9AA37B7D8AA14EC605985475DCB84E699D517293
BFEDAC9C180142EE927CE5E6038C8C6D6D7DB26EBE4A48143744512F50241449
EEB9974E8E0938A950003C6863DF4ACB9C7E4AFBDE0B1B884CABA6261D5605F1
4E2C7D01913E76469569EAC0B6881518DD9B993E1FAA706F5212D4B4ED5B4B8B
5B3C5A16E99234A137D6CE6A2294107FD43C64D7645BCC4CED4F40CA5811C124
1522A861AC0BE0A529A1054A42578461815AB9803FB075B85D2B6270BE9A358F
B4B7902D2F5CDCB756A28BC69BA67B1E2CD55387107449D96E7251BB8D3A8FD9
FA7EE73C73C19B22093D754480018DAA9E22DE537778A874393AB3183B6CFF61
2DB0179495891C1E6CB928BF6F5B5CCC85FE892D7EA4E23894AE7F8B784A1BCB
56BB88722C5506ECC3A3F89C92A50DFACCBF9A89999CD2F19ED2C0E7E2EE6A38
68D742B3EC15E1DBAD3CC6AED31BC020F79110CAFD3512FEC30460534CD90FAE
04C10356F0A261709FB9E76D3D1298B4083EEA4020C6CCBA3D022D6AD1A3269A
31016DD78F575A9570B8BA65B16890E478E86FAA615CD68DC2039604418B4CA8
B50DD1E33A4AFDD8524F951886960C1CCB365196B12493F1D943B4F4C836A60A
7F0D6D7DC137A904C96EB7B3CA2E65F64E81E3974AB182380E87F7E8D7398211
D0CE805938270B6343B8CD86EFCC6050DAA8B204C4A83000BF40B90162228943
095A0250411E81644F995A049EEEB89045BF967D5D2F30D1986CCB571F91D96E
C8DFC16E97A5879E11EF154A08C869BA1CD17D9F4DD939425066EAA5C4C4AB5F
A2B8EDB7E7F3A4974D752397E6D2ECFDB8C866CD45B80656513B6871E5258B4F
80702ADB0343B69EC10B0CCD7C0C2478EB2FEEA0C69754128BF974E29B2B4099
95B5EB6A88A30FB007D57FEFC2BC9E7386C7F617FB824FC072B203F4F59BE1AD
9366701D4DE776365CDF9B6A32D8427EDBDEF885B59E018386A8CF83E9683ECD
6C6AABB289BC700B5EF5835B8486AE59BD102BAAFEAF854C1B48B036052A3D72
7C050D0A69050ED2476275D5384CC384430A2282A489825EE64E4BD9FE414721
789A755AF4B6CDC2165E496FF61A33568FD50F4B6EE65D2DB6D89E8C26EE17E9
00B7E1C277B240F9E4A2FFE98B8597A6480EFDDC50FD30A10ABB310B4D67E366
A5F80AA59A4EB77B2641D54DD9B5DD3D4A414DA583A407C45FAA5EAAEA5279FB
1C9E5E31D28A9D305C9EE966880ED5BD7B5C8DAFF66A6B36C109E467671E1321
28A4AE56A500164713DB857C0A6824B11922C9A40E3253F2D48149DCD7FDF13F
5351E6C89F18BE6EA8B1D8A253BDAC2DA73B05DB08B3DFD01D4CFDA6A77CFA74
31CBFF6B232F3CE2B32636AFE00391FD4069D0807225A6A14046A2E80E29825A
85FFCA0E6829BDFC2DEF84ECFA903D5276B376135CE4C0818154A04710342F10
61D0E651362B4936C4BBD6EDEE6FD1192064133848E73894AE7F8B784A1B392D
62B8E4FEC350E5F9996DB18D103493D2D98096018EAB953D65F96F5EE30A89CA
C679C575831FF6EBC2D7EC755843BFCCB54B14DB1118EBCD932D4ED48423A659
5549CC7D6559DE2598591FE31E1E1D1AB13B502C3A6A1F34931A82FF0FE5978C
80D8EE0F33FB7680853CFE0060EED94C560998A1AC30F9A0BF8CB340F736D272
9A4EB95E821F063C494AA10330C6CA3C4FDE6989C367DCCD4E73F92886614994
5DB2358C6B17C361D96825901393FE87AC2398F5C83FBB8D3AC972C91E47BB17
BA7BC959153845D9EC9225FD4A9212D6475FFC804919E0E8972545815E62D776
823801890783180B7AF8F13954067A324487871A68035DC176555CF525A14352
356E66CCAA518E59FC683D0C37578146DF245A8D1B58928AC55571CEAA88E7B5
E8F83D0BA8BCFA7AF360AA4405DF79A4AF11198989635CE2AB46FD94076CFAE7
5D75D1C4917A6267419A9B4080F6343B006BC1C224115CDA1AA06541C056651B
39E5DD4FEC838008386811B8293CC6BCFAC188203FFC78FFE8D551811E419C10
16875C2FC3D9BF8C5871C78DAAED58E7D84095FA260EA13D49E598FC8A458C08
2BE1ED19871BC4F4EE0CFB511645295D30E48A620A297B211C3996726C2BD5AA
99752F72A10C5F511EBF1FD9998E7633FBF77EA98E5F42616D69D1B74890B202
9F4CDAF8B95A33FFD5B823CD6A45B12545C5F7D9DCA52F5EE2BC41E415CBEC45
468CB176B1F0D710AC71210359986F177C33E5032432E7B1CA30845EE4C7FF49
F8DD75F69BE6EB53C053EB516B52F231C58553CFCFCD20E316FB229762B1BA04
1D46F6680FFDE98F1E5F353A07B59A0704AF6A1251535C16FEFA9CF7A9F685F2
DF496AE239D43135E3E16087C25D86F0C590D7FB9E51E09C85C5BCDE30D15CD9
AF2DD6DA288C9EE68A76F7D836D0AE73FA5299A6343EAC1950C7639C28C5C08C
860EAD0EC4977851FF7A7888091AEC00E3C5746415B1D1F48033C4DF64BF1910
527A0C3729069189D5851D2D8FC739B4FE16A71C47606330341C81847C0A16AB
BF15C3359F8F01FAC3F92ECCCE7F47E136D64E7F4D42BB86631D90FC9EB397E8
127FD3D47DCDA29081BBCBCD1624540A9E178A5AD83557B2A631B3D7A73A2CE5
4A675E0B4116FEBF8041047AD2C09B2DBF99D226F5829D9AF6B665C220C50DA1
A7FE0F3530408598F2AD10E8AB9934D52F4CEA86C88028BC36A6B4DD2FB2B583
064E61ABEF0359257FF48D658CB0DEFCC03434186EC5FD8420C2A36DF73E083B
BBEB5C45276AF95402D94F0EB0C041CB7B4677A1234599BD4AB0E83EF45E20DC
F9778A7557FD80B30238EC4C7705D7EEA640C7D9B9CCDE9F4634887D17EDFB91
0EC06DAFC33ADD8EFABA7626AAB7ADD7CC5E36F02FB1E6E0F98D758E1F58080B
91D193781C39D765EAF1294D4CD9FD2FC1FC8C4F065447F5AE375E90AB1DB99B
316CB14F474E9D6CC7C8FBF86B398FECB416D633D0CBF68761F29435C7425B34
649283416D37187493D4C0C9EFC793B960637F9953C07096E17D78E2F61A03E7
1987561E6E4CD95008D557CA7BFFDFB68A41E778528778D2213CA6DC3A62BE2D
64A05860D0930D7560169923CEB18025FF4554899EF60A69BA10A8E42FE8EB16
C8B38FD1EE596E98104052940A23C2D6CF2CAB91490C32785858538FB9793E0F
61F648EF2A0C66A79D307A2F8499B97F2312B6455CB547B771F0F0ED371828EF
CB01B35A95D0E929461A4A0166B3AE06796088B538522D048080030FD0C8932B
C9F78CD04766397C30CAFCE21C74ED943A4EED0C1B3BD32479CB404434DD5495
3C19A2E022CE027509679591A4253408E93FE72CC66F826A3A692434D4D3BE6E
D6DABA601BE316B763DA3747A9F27DFF02369C62A6EF321FA7E4EF0B57D6F60C
2D6475E3364D0534FCD0B18758DF9ADE23762323790A40B38552CBAAC6488B60
8D22961347DC2E624E938CC9A255BF52285D2C352EC425C057E8F9623D8AAAF6
D6BC93799BA5D7EB63065ACCE0B5612CC3501332EDAD9300AE39FB2D5B4AE322
41CBA216EE8C2D9C96FF0A04F2EBCCA2467174529C5242707E41F4ED75226931
64D8A8853C695C665F4565AF16F228285B627BE31FE6BEC3F374AE853CB3E511
3791AA2F7760754D8ECEA334EE267256720D6CE4BB79EB7633E9CF7353102D74
FCD30EE31B2004F31E0D4E1D5BE7BA35B34EB84BD59C8FC9005C544BC83CF841
B9B637D13DA4DC7FC3B4C147D505D74B8AEB18EC67EEC62C1005122C3B92BB91
193CF9D5F04A36225FA99B28322A4B6724D2F21120B0DA7FAD060DD39FDC19E8
C2D2030022FA531F21578F43CDC5ACEF853BDC31E0DF7689885330F99202AE19
625378B75D94F7153C9BE4A8E7F67331B9A40CEE6619A61AE892C06475EF1166
3B0649A4DFE96B3A49C02805E1C56026F3AFF6B50A8BB53400B855E1847674FA
971744DA02F5D62C0A5C9A1C1B39778132988F62AF56BB1C140022F5003658BF
958D3986BF189636037E95FB425AAC96FCEBEEF81838DB34A0F6F874E8BB4797
3D8D20D85812760264358A758825ED631CC7897D81D8DB5E1BDC5FA5472E9005
1E5BE69F2FB9FFD46BF3CCC4319A1EC5A83FBA35503118FF4A412EB9E00603DA
2CDC3B14EE62296357F8D4DC7FABE92C29B5F50028523C734F57DBDF65731F1B
E4B11E0322545CFE3285AFEDD87CF46710EA0724F656062C77066012F35BD4B3
2289F7FE8C66A6A82D7D7562B0AAB33A8546386B61903D7978771D8C525A4116
53B673C240F8EA71D4F9F578518E37644942D4551307664C8838E23015A727DD
70ED6DED0871C39451E9B9EF85ED8754D2D953DE67E9E1ABC6584FC5A8F4E6DE
25FC993C42BBA5F1DFDCA247FB06F3839EEC3EE3CE598AC6A128BC1F16839E5C
6392B3482692E8C4487E1F750D77FA4FA0F835E73D7C37F19A0B067DA352ABE8
B76CFCD94A16CBE268CA214F7DDCC1A0BE8E81D05E76E993EFAE23FCC5EA1656
506D8551DA940B4655C87BD24EE767A4E159C78437EB057EB409F7311784FA0A
C9FA02AB0802E20E46CCD7B4E589EB78AFC365B0B67FFEC3F7099AFD30A8D2DC
7F9D48B23436D086A97EEB5B484D368A266BB7E88FA7E405C8B29C316B4365A2
03DEAFA5EB7C385A48AF839F7962D12E9E39EA99B3F2615BF01F699AC1408EBC
C3EE7CDF684AF27EF3C09F70C9579E8B519F2B675210E8A891C440B8000D0A7E
67783E0A16FC9C91EF7BDBCE05F0733AF96AFE26DCEA526285CDF549243B2395
3448FEB733DFD8CB4C3712C262285C292BBA601785960425DFB42698778AB7D2
3C4EB63A49740A063DC20C87C33493EBC990F25ABCD0884ADA0432D63B1C903E
55A9C4861DD61A51A3590C50FFEF722E382CDD254C8392E884D2210DEE67CF5E
402D7C68DC7B049B73AFBA5C4FBAD6F8340C270BF01EDE19031A30259CCEF70F
7756409B35D1A4A7916A0DF416B8915A6423433A1807BF025AEDC089990656D0
ECA75D0C61D66D4DE7414665CC42B700393046A19CB5AB546CAF54766928FE2F
C3B38D1D040A6ADD336EADFFCE33F7AFEF2A08B4690699E5B439B1531D9BEF69
3B121F39CF96DF6AB55031016995D42ABA7C76751450D81B314643EE919899A8
8E1A7146B0CB7CFA2FC6D465F9F7E0F9BE7C85FBCB7FFA5C3881E11CC011BEFD
2EA53EF4B042C5B0037444830E6987404A4ABB48188B57B9248CEB58D9AD7300
8F7160353C3962AA7166B8A7F2E97D4960FCD90BFD1CB9106368BEAAB79D0A33
7A9455BD31409C8A5B51C8AD7F10A5E05DBB94D31193253B89933CC801D42793
19A1B084F4717B35C4A390C8B7F06EC934A54498F71056A28B3D93122D4F1E8D
F923EEC36B6BE9D8EC7A316CC5F53377B405A0A13E318FE2E078B7872B90950D
E333A444BE5476340C4F274EF8D0E09C207FED2780740E947D5D66902E89688D
20129A6293C19955811BA72A097446FE8DC025459689B9CFA7B3D28D3BC55585
199067129F777CEB99C75681AF380D4D63EA1E87EA4F5AD3FA28213447882F26
9714FCB39A08FB929647853487B44A5580943F2875E7DA1FAE6C0E145B4723AB
D0F4D4859B2812F7FFF12D7BD7460BBB57D52F7734769A7EDADE5A13FD58D83D
CF3FEE852AFB0C380C8CAB2B42A18679868DD0A0F9018F668C82DF5EEA359EBF
C4165D574CD5C0B07DAD5DF94D713BA994F51FF0D32EAC426FAC81E5336F5F69
D4466FA74F2879BB03C350A04614467A4D72848392043281005292714A8F491E
2D0A153B1C11AA83416C0A07D23B825A276D3D8B3C60FBDC83018F7AD88BA76D
6611C2BE0414F57B9E4DA091F606CA67168F44F8BA7F2035280CB38DF3DA0F5A
94DDBFADC3AEEFF2B3CEF099F2EE4DDBB3B5FBD6A5E9277945A57A8002F95FAF
490690EB6C151E867A5AAFB3F64C66949B68F2350A6A4B29619934480ED02A6D
4DCF75378A440694AB0AFE3E0E427F4C00CCF6A760F9A43FC71D5FB1A16DEA6D
6D320CC01DDB1EDFBE9B4D20B0BE8BBE3C1A5459A27799E63F136DCFFB6296D1
C86E153D774B9B69D5B3E64D4A9E9491D41A70691D3006F4A89AC8E95965D756
04A28BBC0324DD1C433918E8F9AA8DE19087A6050D20C33FD58DD84C1D2B521A
F5C811B2C0492054CC4F6CC84B26A65F156A942BE4416093016F7B6B7D1821F0
7D1CBFE44CF9F8F1E557D27DC5C5254721FE69E57EC31254AE4F45B4060BDCF5
1C28ED46A45A1DEB1C93FB1AEE54042F3750D1F22F94D3F931EE74FD4C57FF54
1D5C0C6801DEC72AA27833431719539A584A375CC8B9C4FDF77D301680CB83FB
CB798A9C22D0A826B9354EC870F36CF092940706707DD40BF2C4113755D38F0B
959DD34D98A0D0401AD315690BFC0F4CABB31D5E51339D70328ACF0B7BAB4EBC
DBCBBE8C1C582F30C6DF5FA2097A078ADFACAE547DA5926953C511501A2632E9
DDD7EDEAC56C518175212C74E1E99465F04202E76AA598BAA32B1EAC32BEA5AE
E7B0ABCD70AD585E2855A681E77C95E63833DB32F9338F9912E29E78A1B7CA84
EEF0FAEB46F0B4B88192BB6AB1758B6A5B219557A09245577F997AB502248025
2D5611A19652F0AEBD8AD9994E963269C3DDF1A67170CB45F2AC14CBA34FC4AD
00B46C36448FE2DB35CB45276DFB339097EB4D76EFCAC368A99627ADD833BC44
31D3AC8F55DC904E47ED2E89535D50F3C73B5055B621825E7F202F06D6C0255E
F796FF8491FEF96A583B9353361CF3B055220E12D3A1E0810B01C554FDBB8EF9
804F5C2EAE78A2DB2E854766BF66F28BFC3E67E513B00486C1EBBD183C000D6D
0BF513155727DD54F457E9C2D20417DA2D04D5120E510971A53273FC0F14AF9F
539D2289A0BEA1A7ABCD5DE586CAC86BBA5E5E5153B097B6C7DF9CD047624516
1CEE1E2FA54E38977031156C876E12918275E17D900F6B4F8AC6DB3F3E54B5DE
3D9670D3318CD8985AFB18CA87DAB37D11924AAF00565E3B8EDE8E40FDB4B199
99930E70B9355E1549DDFA2C1693F085D63D1FFF71113FC409FD8E3DC4C7097E
4A0295CC7331C64BDBA3E5969746BC4B8AC85C7E817DBABA0E78F36954E99222
86067B70ADAE02B576992ED48145026B2113A4179956E369C41BC4853A204FC7
DE2392905875FC28D07872F48FED6D1FF1AF5336910F7C7AF7F4661E027D2421
6394F39CBCADA68AF61B53AFA57A14B7F2D4815E0733979B9FE7F13540C28682
534E57DF995F87B37C537FD5D25484B3B33C2168859E771835EA607E168019FF
408B3C783D071BFADD0810D843E9E4390F68436D4932B157CD00A7760AEFD618
9BFD2DA5768B0F92E1CC7C2EE685EADB3D586B9579B002548840847A2B333E5E
409CF9B55A65174D68833BA0D64D1D334994F88C04E2C0E7344E67939DCFC283
AFD4D05E0AEB79A396158E522ED0A422C661C636A3BB347CDA0C2ECA281D5A78
299040EC537E3E3410AB19760020B6F1A046A3F47F05DBD53CE9FEB02D5261AB
B4F7A1CB9A0AE6ACD1B118C3B359094922705BA821FE10DE7B57D143E0C9020C
73F8C38CA8468E616704A15785C4906E9AB0430481DBA63C345E8D03B9C3D761
1EA9FAC85A2F7E3070AB53BDA033E348F5466B56F74305420F94518C117743F8
787FC99B9CBA4D1CE37FB1409D19F939C8C597C30588DA140BF244E8B1B06B28
EFF409790C56F84F3A5B8F8640A75773633E94FF6ED55C41FD7D9CCD6DDD7BD9
696E0FABA52AAD3535115200C6D6D22E23618A75DDA01DFEE0455CD71EC63FFC
65DD3F3E44B6BE8B3EF7FEA404985AD47DB0BE813256C5694920D2EB03B70A66
E98EA4A0EAF113D7DB46F99BA2F91285359415DEDD58EBF3975CBB839C8A598E
A64CDB5A97924778882B464337BCE1CD69BFFD186D26B23163C1AE17321F1520
6E900971B3916874DF75DE7C9596AC0D1A6EBD643A85BBE14ADE4705294999F5
3D72A1F8F0E41BC1071FEEC93318FEC9CE42608552DF95FE11FF68FDDD51038E
F39E4001BA0F443F741E7B9EC1CC7E89BA81EE6E462B8A24D3FEF1B7E8CEEBD7
F9E50EF5EAF90ED654AA1FE1033EF8C9C9F19B67FDD2489C09EDFD1C430E7A72
12B62383A61FBFC8FE3921A6870102133FFDCEB982F0B781C75151731EC3CD16
540704715418F94FB9D30EBE4F66B87FFA7C6D93A981F9A051AE77304640F756
CBB0932B540CA430BFC85A2F4C08CC0FDC729EDD880FBACBA03B161D884C1E58
0F7AABA6E81076ECCB87CBCC72EA22E186E3DABB640CFD380BE8DA45A753C0BD
3BEF7036DB7EE331638E1CD57D6756A3DFC1F05245C4AE72F3992F607E8F4C2B
D453997794099F94F1BD8E8E631F1B144EC0CAF0220DBD0164C8FBEF018AAA3E
401C9A27A7D9E1C04569877FEAEA30182C021C7CCCBF8E092DE771D0A244BB59
BB0922D1C35813106DBE21B66F0DC5A1B783E1C1409353BC37E820EBDDC2BBB6
0BA557A785F3BCEEF1F9D377DFB3191B06CED0ACDC88967BB5B26D0D0A6E5B70
2B54FCE813AB3EF90BF2E691C66C1066CFD9F048340FB6F63EFEC2B0323EEA21
EC31CA5274440654F95D036444FD4729FCFE9F49E18E0ED6E372307C0551AE77
3BD3C326BC8C6E9DCE634513CBB2B75DBEE15B788A102BB07128CDE7400BB7BE
DCBD42EC208F26B5D50F9C8BBD55B60766D9CEF436C283BFEF3534010599CAF4
58182FCCDA35C70C3D8721713B23E58591E15ADF7FF7E985844496050AB72113
63824DB9B7B27BCFAC5584F708BD874081F39385CB8B7A4D51431723F98138C2
6F18D3B00ACF2416DAA0E8AD89E14B55E2EE4A0382B797E996140B426CA888CB
BEBD8C0EE62DBD60B49B1935EA38CBF518502AC801F3C435575EE8AEAEB9801F
435FBB9B2A430CA38D53270E51C33F71EE7C4DE10E582A56C83A0FE46DA693E2
2443182B47ED836DFA64CA4DD59FDFF1A2C78320237F66C8AF8B6B53E2AE9D0E
610859AD9E845656718EAF7497252BA5A3AD952E96F75DF1DADBE80DEA2F3090
01CBE5C196B78B5A6A4F5950EA69CEE9983EFC559FB56C824AF14EE3732992CC
43893291BD5E8C10B5D22F393CBD9F6B8AE8319959A0763EF84AC06AD3E41D53
1D4E2F6DC034A2721B2673066BEE0B8DE32E4AEEE816165D81FC942A48D1E687
E6D080D314DFFD37758983943FC547D34D19FF65DECF40E9147BBC83CD582029
030CBA78C35AFD0EEFFF61CCA134B62C19D3A64019414EDDFF025DD96F5CE317
3ADA2CE58D90FA20CBA3B8FA7AF5D414F5F5EB1E3CBCAD9656D51665126E2D8B
FA5F0BDB169F36954F51866424659D3645692A4FDDEF2E8F02FB74889F965BE4
177F9A00035D9E62E2380EC1D9D68694C8247A3E9DC02A03F449C91E17AB74E6
7CE4098EECCAA75A7F69FC14DC50777D5BC276159498132828A935946B9DFC6C
294A65C85D938A8412FC9C81E6D04178921E928ED12E0BA6575273ADB8F24627
D162F70B0C36ABEDA8DE10A08DA8A3C64778B27EEA8EDD8B5EFDA1C76C17501B
CB143F99234628271774A316E5599D2E542D0ACA67E0B8DCB274B7EA9989038E
B6EA65D9D24D67DED3C5ADF585B17C1C5C7B8B0A1CDBCF3AAD2EFE847E83809E
F0EE3567D56DF637E506D06CC565CFD9922BFDA2A36F494F3413E0CE641A43BF
CF1EC0F3E1E0FE022796E62FB4A0A2F0087794347E0DB5EA506F38118B3CF94B
7E1BCF67D5C4FC18127C862A1112840E480034A7DF4E9080B10F74551F8EB6AB
87AB89578B68AEBE8D332F3AA9EF3484DA87E76D7AE60AC155103A68C8ADA3C7
73454C6392FD243F4C54102551617A1546A6280EFC4B11982ABF0EB6612FCE85
5863E0F7D070D71321BB878A1821A70F43D3F0ABFC1FC73652CFD2AC3A91168B
D3AB87829A4C5B4FE136139B7FC75D228760E30A7BF552E25EFA72743013A561
6370ADD9BA6CD2E37831B2B3D5CD130A9F72780C2A285AF9574D63916648D956
E0678E74A37CFDF717E6A97672728E7212BCA10C042EA71759231F73297D3442
DD5471AC55C7CCA4A43AEAC95CB0B82F654DFE404DBEFD7F9A354A8CA5B3973C
5D9053F76F1E82937217258943F9B9F8C4706C15C7969FFAE73E095B5D4BC0A4
4EC67E66D6557E12DB87FFE10F0A50077496A93B3EA58F1FD0250D30257F0842
00D23E56C03D4A5D1D0B887925917F5622E6EFBCEBE1140314CF6040C3F1BED1
ABB046399FAC2C38F4EF1C8F236082C86A8E7053ED8BDA5DD77338AAB8E46F32
40518D5001A4188CC6A033270420F737D807E2CB59BD118A450D3CE159FEA1FE
61D7792B025B2AD6E670EE9AA46D295B20DF7A300E7DBA63B7B1828ED1F8342E
915739DEA38E30B43CE4887A8D18BF52FE7816C6104D2DFC3B9D96D9ECB610C9
8AABBBB215A931C8C1E51CFB8BC530EB187DB9A82012314A778017E1D32E5756
1525428E7F5CA8082BD1C1046BF4C46767CB560C9679139F23EB1F9D292C8224
9694B6E2270A2CCB3ECE94298F1FC51A48BCCA685F76EA4458A43595D6C737C0
135955EC97A2E111F9745BAC7B4424C9A86890140CA415070F1ADB34BB2D90F5
75BDD4F63A76C812E057AE17E5DA0F1CE3ED8B62A7F3B5DCCA0EB45406256406
B2BE244352046672B9AAADBA046D4F7644BA87AFAB56FC62F4C256337E7F0350
A9E82FFF1E8956BA461C59AB98D95CA6C9EBE9936DFDC84B4D1473945D8E3F89

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAC472B1D98FBD0E2E060DBF2CA9A25A5
B11F5A21C9DDD3781A586EEAF451935FDDDC897D2B235FC33C523F93DA3B5684
49DAB2B2402C3A49097E7598116A4D36295BE3F0F241BFDF8A78969FF3C005B6
DC5A54916ED69D1B7FB6EFB7DD6B6C1E79369FAE64074784CD74B34B93D42B17
F6059A1AFC17A51EA38AF85539833E865A51A7FB5A5279043E68FFB9229EC6DE
4ED5A8DA7D9F76AE8021045DC09C95C9AE4B4EF735A5414D985EAD8846A82AF9
1F44923F25BAC6773C8AD0A810792531D6C664F8CC76003C390E4C666D8156FA
A3FD5B5A21FB57B445CC3B9E9DB8993E4F73FF91CFE037D18E559DAB50A977CF
474EE1410D7097785D120CACB576738EB12DA190F7B750529BEE076434721451
DBA912E47FC61D09F44A31F7D88B072B10C44A60DFBC669093304B6A9793AB48
4BA68656FD37163201BA034610F9A7BBE4D94389941682F0CABD073F2376E62C
44DC287DAE5C2DBBCA73CAF31025A3FD47B8B3105C7B8DAF584E040F89694E7E
7977975282962120B9FC4056A749DDC15C7A56AC870774C97200F0601ACCC391
9419478EB7CBFE4FA27538E2780FE896E01C6B488FD152C0CFD0662D318787C1
08CF6922C96AD6D987BFCF71D9D041AFE0416F4F1A755E97F12D7026336D199E
9CA3CF34E140D7DBDF0CD2C2808BF33DBF18E81C46D517324A5E6FF1135DDEA7
7C3A81634324BF12787974F7593F2CC8CF006AEF8B1106D9E42E1BD075949F47
EF868AC4807F7AF1D8580FA64B5350CBE26C0401E33DFD17F6080B00A9B3BB54
8FD2D8337553BF31AA5F2A0A5156B81553747E436F523BE782F9D7CF003C7D49
723CB3509F29909A009B6625CD539E909156A47A1D4F89C3686AA1450F23A5EB
F94C4754EF165A16F356294AFFB344911D7ECD11AA4FF54DEF7C1093ECDC200E
0C407318D16C37BE276A19C497B4C0403D49DBB6803FD753A9E426992ED6BC8B
EFEEAD4D7F0AFC75BAB14B817CE2AD91E5FB8C735C681B61295068FDAD7F8655
6D7A49C65A2B28B030CCEB0EFB92CBC6C3ABEE1E14C643529096A2EFD737A46F
DF835FB00224251203763DC185708039F299BE6BABA56EB677FEE7BFE1DCD5BA
2764536718B57418C07E23BB2D72A807F216E2009FFE57F6CB0CB72BC26EF0EC
DD2C0BA97451C9296C2100009D54C0722BEC75EC3DD97D3D9C53571086A1EF88
110925908148F724A5D21C53DBF2EECA199594CF093FB8D49DAB28DA0EDB9463
FD1A066CBCBA4B3FCF3BC8D6A3496230AAF1232518D579ACDF043A43A294F4A7
F0FAC599672AC5FD5FB3C7F90A908D3DEB35D08E2EAF4EDE0C0C64A45E3F43EF
0E613C40802E0D32EF0DF8FE6F2D4E2880EB4A142B1051D652C1E371D57B511B
52A4DB8F69D76C3BBB44713AF222687DB9CF10CD88109B0AA050F06A64F757B5
69AED696735480B8BA5F68FED42DD602A9644C8587C6BC5C9FE406C4A4206DF7
652D22B20BC90EFF9E94E483473A359ABF0C020AA89F9E74BA70701B18D94002
8C70E43447EFC2E50AD5550235270EA6787A4E15BF4FE23DFDA51D40DD9BF5DD
D3CB175F3E1E612D87391E09FE53FAA4CD9E8C779273D47755CAB6FFF172646D
F47F999BF6FF6FAD1450F5FB9B42ACAD3609A54B8B49C81270862B8528051C67
824D505EBA49C21B1C0C5AD05C2736E54B1C37962B6AFC229BC6F0A0527C100D
EB0C7D98EB67CE9C25F62632EB30BDE3A806E10F28A51822A85F52582848C432
4241222673009938835AFBCFD91900B19867E85B3CC3AE38C42A90CFEC73FC18
1CA0042E22BFC1725BA2C696CD7D58DF4F8A5F6C606372AB44A10872CBD16F81
22A624D8D71C946740BE4BF01A7ACD72330ABC9E413D1DC2AC8DB5FB78D744C9
ABFCD095A12C405F561BD9FBC456D92083B879671A87722307DD8BE84F65F443
B78CC756130F09B9C2B636562C5C7CBD2D34994227FD7BC1FC0E142A7644F56B
21B1EFDAA5BD4F7059552906D8A023148C895EC6A8FD669D6702EA42A1BCDA40
7B3C74C6BAA665D56A05FE6A270625DF8ABA0420067817990FE7EEAC4CAD991C
4DA475602C98D1064DBF03040A309616B0A7A154D9577EB6EDFB9F157911E60B
FC3B69093EED07FE5C491EDD336CEFF891C44368CC68BC012B0B3BE7FD642FBE
01853F7F1EA8A129600ABE4143FBB248AA643C5F573A81891AE27C8741D9A25D
065223F04A29C28C1C21FCF83DE4DC83E854B7E802445AA7F3728514E3F485DE
7B0FD1C34723FC8529F41BDE487280787CD363A398058AA4BB535EC8F15819A5
DBBFA283F990B6A68856A2E0FEAD3FFA383343DEDA2CFC1099B1C9BBBE34F5CD
3769804A9E356170742E3089C4F6137B402CCDF06E6CEC73153C415D4511CCE4
0B458764CCB7B3D5D909920DCCA2203E28B5F312C10B94877315E717F27E8B8E
1337629DFF4C9F257DD2790DCDC92899C0127F200B8CF2CA3C067A34CF65BDF2
76D5D7DE707A867827389AD410CB0816BF3ED4CEBF13762C6027769C216D3525
5C7FAA8EBBFE0DBD7AAFCF78B5AD07D26F98F716E605799F3800C68000941A52
D691640320D5E607ADCF51A5008A5CA9091105129F16BD5B2B6F2DE610C064F9
5504C55B0B33BA921D3E00537475478BE62E4A4C69618FE8EE03001B4A00839D
B50762309EAFD25B0D6175D567B8BE86A1AC1F7D05D239E99CBBA7E661295C05
43E196D6D9D86C8123494D46EC27566B91425A2A65C07D4FBCBB8FB94BE05DFF
2B3679CEB0DA2442304FF353060D4326034A5CD9EC8F7E868A429DACE417CECE
A2D839810D562BC8ABC3021CB68A52C9349C362FD595A48C117213B7502DAE7A
2074D4FEEB470DCB239EF9D2771EDD2A4BDD22F82EC7F10C1EA26A509F71696E
FD6AA65FE8DDCF689666504EB979E085F5FD245FEBFEDC9BB1134443FFF918C8
051FDDF6B44A2552C20E9C17F1F3478D685F972CD43E70F82264386ED3307C69
F7B4EB8C14B2A4EE6C78DFFB590080B9F865D19D39B03D577C85C3A6B25CB5DE
5208EF1DC1009C1E9D28B71A246B043CE44E65FBE48F3111EDBB246DF8911317
DE4C75D695826A46540B4F8DBA708AAA2C2D73ED562231D19C05287689EFB3D7
E0CA1DC96A72C881E694C4C5F6A2E9ACDE3B385AF7BC00D85F75BF5F32B350E2
CF46BA0E8D0120B525AA93F5437EBEA5A06488A7CB7074776AC36B43F56134D1
CBC7E2DD3206F64E3C0126EDDF99BD21DA81D18462871D643CD3657ECB167D54
81A1CAA6AB6A6C2F54D5CA04E5DBC61BA2554903ECF016CC5156243D4D4E7820
A54113A00F62F7A573CF78D843AE867EC303291964FC2C617FA9904E579D5BD7
457627A928B16B0451AF70E5CFB610D6B8C46DE288DBA107D65FCF751C871D3C
44DCCB5D983F3D3D2382F0CA5A78DC38B8B50077EC2704FBE937C9C79BE3BA37
02158614BFFAEA6375F931CE36B485AC96E6AC2C14E3B76D063D1F74FBB14F63
C372B23671E722DEDBB8F41E2BA0D1C22E0803B86D6FA41044F55D00476FC578
C7A03E2883CC7597D0AFE18E910E32A1A25D30195E6D7DF1F3E66ECDC4117D1E
2A70E02B82B2D2FE731E814554A6595780DBAC7AC03CDA298908B188DEBF8F10
D832F2BD3C5BDEB65D65D942ED54E36A6FB9B9CBAA3972BCABAB06157DBFB18A
3A746FA3102EAD356A46B85F69C1005B864AD5B72792345F2E76FEE2C97792E0
34947BFAA3AFBDE85B8AC836A29CB410107BBCBE4BDFDCDDDAEF9C4AA25B8C4D
BA5674894DBA541FA54BBFEF8969C2B3D9201BD72C3795F639C6D7BD54D84907
8D871250646C13B71CCF91863212CE0CE1FF803FBD3569D763CA3CAE7B8F4B2D
C1633CD77269685B58774F0C9556EF708F3A11FC2712B27C3157314BB5A8D210
044D0C3CA09B482AB45A87B7902B28E5BF820716D1B70F8A5B2225DF05E7298A
DF77894331ED25BF6955E13DA0B4DBA8FF78BFDFAE49D3FE7B47F0B4C5BE3629
7E9DA5DB687C3BF75C879222847F855960CC952649426FBD46FBB7D1BC219B59
B3BB99066BCDDBD6A90DADFDC11833C9315CBE03EFA1554980E13B37FEC33DF3
B23FC7BFEDA3E15F00E029042A6C6A5258CA8ED3E730F889E0E6A6BF81797373
EF64D457FFCBE41CAE0129E9F3CB9D1D32F1075F66E313967A0B57292667588D
0A60A045AE5775EFA1273AB6EBD83470905482FE174288EC9F9541B8757874D3
6F6F488FEBE93512B86F0547BC109D0FCA1B61F7B9A747A929E0834456AA8345
D67BED05C6E0D346853DA730D5957AD4B2FBF564E2645525DC115F1EE96A8C4E
A4856635CFCF186DB9CA2E4FD8A303BA61AD0D9AC7744DAF6186E21A9B0DB6A4
9785EC5565D2B1C4B7C7D7907AFBC3EA8075D441B1CB48876736D363225511FE
BE1F165411F088AF295C5ADD22C031A217146DC82CF1FBBF8BBC351A0BAF4CB6
2F893E21D5391AA9F78F043BAB8065FEE8E62DC916E4C729AC372293318A3883
D412344DF41A0212EE104C4F24B1CDD002B2E8741BF0170925B3517D9D6017BE
095C3250ACCD5CADE65F11AD7168DC58FBFD511759223ED7808C986098F7DE68
AF7FEC93113DD167A1E718C87E3CA36373AB7574F3BA20521165894BB51606D4
8D429306F3767F7587727B64D2D567A978761B15AE386456AD8C5D6D08C394B4
FD31454C19261B8AAB9D753A323458808BAD0F492545616CB6A63CBA788D18B0
676A0F06BE921D90480A1EE27B08B962DA92328296F87E7C9301F0A3E036FAE8
035084D12CE80FCC766F71F872C525B19AA0133905BC05F7CBBF38C5C5BC9300
74813A6BAA4F7CF2CC57A84CFBA77156ECFCF0BF8387E2791C791A0005560EE2
6C52E95B71C4B9F6D3BE66B39D0DC2611FCF84832EC7E798349DA14A17A7FAF6
0A12D3A1E0810B01C554FDBB8EF9804F5C2EAE78A2DCD18F252A4A13C1842F8B
EB5A2416107B1E59084B5892D16B0B0340A268B0DDB25BD184FD79C57C9EA994
E8F2481718D13CF485B3CAE0E01B327EE29107319D27F247A93B9F18F4022B52
93001DE70E6840F613E8C5CD09CB9EBCCE3FD4E9C75A824F521C69F2786AD0B6
8F19B6B7079CF0788A7243C3044621CB3E65487B72A54E204D1C1B6916E2ABF5
B2EC4E5F9957BBDFF06EFF38D2448D8DF8EFB61253C837805D7BAC8046DFC3F1
C85E335DFCAE5075F988BD9484F2D6B94F1294EB78A2F68278EF71113EF63B20
B2C1B81FA5A78EE72D3F7A78592128C6699442358D53B9D31C03AAB7C8B15D98
1DB14715ECE40C9A9FBFF525C63B7CFA14FF1A3B223CA09E40358CC8945C958B
8DA7E7153F3CAB57B1A27BEF7F302583A8B0A66E36F142899DB0FE1BB6A1A133
6E4A757C30BECD3049923CA6285922B643BFBF33EB911613C87392E4EA5BEC2A
A8D2BEC857182916DDCD59AE97318CB05F5C32363E84D182F3B1BC1508FBCE41
3C0732FAB1B8758FA9B126D3263C7B2932FB3D7E1F335DD11169339A1EBF394A
F7EE7076395E17C2080BF19B870657945B6D02759B61E3BD0FB4DE330D2E5FBA
8AF4C016142C1A8B337A89D992FDFDF31AFA7A033B01F3B878BB4C56FE082AE3
A7C81FBAA0F51DC8E7DFDEAF33C46987942849DD957EF2DCE3A0D29F9620C41D
B22EC0C73954D2702245E1A4329CFB5F82A3F88246CAA6EE15DAE4192CCD0F20
1709D9631DD09E5DCD0AB4CB2B0DFF66A17E443B4F03B9CCC16A0DD817976E4E
60DA09DAA393FE6A4EF4B467065FCDA591AD45F405243EDF44B4052F810DAFD5
0612B985AA1BB8A7F709BDBA6705D80FBF0AACFCA7D82422BEAA8E76475F7F5E
1A736660D9AB5E2903DCD54476DD446BEA201F714664CE83D20AD69E65CBC555
CD4740BD31A9BDA29B8D036473E7C5FF6EB74EE0D67F0EBCB7705A43DA4915B9
ABACD63CAB3F114572559EBBF5683C070D78A06006E7E92D25A6F5EC9E278066
61753CCE66213A6163B8B44C9A89068E3B5301D2364F883A19D0573BAC967DB0
5685E1E2031A7EA3B7A971E4D067D2D8A66A55FFCCC8EBCEC593DCDB97D883FC
8742BF8A164B1A9B3C176A090A9F6851FF9FF10CFE04F29E2AB388D1E4902CBB
38AF4DFA01B0AEE3ABA7AF04C8C43F34AE3C09162E8A4FC6CD4741B38836CB59
9DF98A246EF0161D0B6036E7F654E1FC0D9A9A3FBA49EAA38A1EEB114D1360C7
11A40FE7FE508CDB795A3BFDCC6778918B4FFEA71074FF82BE314681410AD737
7674DBCD9FAF13690CCB4B6F6B55ED1D99EC4B79D2F5EDEA14B7F6011F8A64E1
A2935F3463195DE95A253AD84C9B7EB6D773594495E0ECC246A1A96A67E7EDE8
C1B81FA5A78EE72D3A756C4A30853D90BE54207C2842045E4CB16FC9F2FB688F
D92C3919755C48B4F711372AE3B7BB1090E9EE695BB39EF330A07650344DAF45
A4816FFF15F540DAF3BBD92A80794EA774CAD2ECA4581BD58ADB6AB154DAE795
70F5385889A6967942A943FAB5E5B26B8567CC9606DE652CFA8755702DF94F34
D4071E65B1991419335CF5D622D7B95FD18E974B39A53B5DCDCFD9FB21A2F8D9
0C4256947D9D4CB1DBCF751C748A7ECE0F4FDCCA3F1B81FAFDA0C9420A7F1147
56E54FAAFA7A308B95E6FD08B088D54055823DB7D1D12E2435634CF69890D14A
1FF76CDB49B4967EA0E4C588F40F4683C2295FC0C58D564A2A4AE299B32E5FF3
872C95854381F1D0D070EE364ED35373AF1D958F1A6B52D6FF2F1F28DE13E4B5
25245B8299887253B78FA2E8AA6A9433272C23534CF0E8DE3B2E3D4136A28CC2
6BC8DA4C262467AA66CAC0D20720013D660B929362C1591B12A9B82CBE1F3F03
D7E973E74B0DBCAD0D323F06A1983104FD0583F6B3B0E85E66C882C0AAB42436
D8F78AADD66BAF9417F5CBEBD5C3BD509174EFC033303F52FA35645A7055198A
6678913C5260CE1A494A3F81C9D5B5AEC28E256A497BDDB956F6F57664A8A8D9
BF3903222588525D8DE1064D3D38BCFD8A6EF665B578AC7ADA60300A5A859710
93E1123A36146FD621714D304DABE2D4C70D28843404104C15310CE97650641E
B3FC5679A4B22246BEF213E56AB76C06F6E27BB35E5916016B2D82C79DD3C13A
D5355356E8F66CECBE53DACA901E262B77314B3D58485A41DFA10483B09CA310
FBAD52C47A5FEB0D6FB202937612A69B16CFD8C3E1CD1DEC1D9DF7B76C7DEB35
FBC06B01915798156A41843A34049ACF9A6AE732D69E07A320D98628B9430467
A2B7B8505D86DE3291B226FFCA063124461611FFBB09DDD3D8431684EAB1BBC4
820142F6F29E86170A9B10060EB21C635D2245540D09F4D98FE9E8ACED1A4AB5
8D881C8D195DAA33384C70519D1D4C79DC032065F20BDB3CD1453C099420961C
F38304F0014517C0405C8F99D4230693737564E87A61BA231EBDD094AFFB69F7
0B427C5CC5A09387CDFEA4EE0B707786C037F2005913CFBD76F649D137FDF741
53BB9CDF5BDE6C24FD0A781A3CEDB9BEA5F02B2C64658EAD1EACFE612AC70EF5
F6BE3A62B83B64ABF69820F435FA193F5BD70B02F09D6D985B6F85B444911535
225F26677759BA98FE6AF2BE62CBB2B8D021488E56C93058B9C903959847D4E6
81865BAB7D2169913A0C1F0A9AC6D9290FA67C33DC33A54AFBB174BE9FC57A29
A2EDE2DCF7B1DBEA2EDAD0B37123C97C9150552BB891670C85B22F4377E4C347
EC5A0705ED5F2058272AAD389EBE9AD9949D0E8383727AE23FF80A95C5045BBC
F798469F7E41FA568BA1FE13640E6E12248004676455579D60724C0E4BACF837
EA7144E59329C9113718B0DC649FE6FD13376564295690043A8215C0633ADE0A
B9ED03959FB58614868504D8AAB082C5B02DEDD276972B2F19A4C8CE5F0D553A
135AFA556E38E37B1A06E5CF69FFBD3524ED1F2BA7EEC0E605CC899438A27981
2FD6F6D3E92F135B8BF21D3E89FFF1A2BE9812DC4660814D01A1FB0AD7ED5C4D
1811C75F739B47404302469CDF2284FF94349CE1E0970CBE494A7231979D50A5
CBC1F97242E1D2EBE9284B15A1186E3A4DDE61B650C6F2CDC430350ED0D480DF
588DF93B6925DBD620C1948887A6A65E97A6712C01872649C885A3BF36EE10A2
A8A57A14B7F20C9FF9A2AC9927CD5DD2E50DB7089E4290D85811DCA26D765A79
BD25FADDAAB39DDD280A17EE1EEEE783F3DCDC7764766AC7A6BAD2BAF62D28C3
9E8FA4E174E13D1FDC905C86493C8F2403249600629639F2141296A3A5FC059C
FB08D27D29242D2C40517EF15F35CBF5C81DE2C6B4479633F309A397FE465B0B
FB326FF46C364A8AA4E1CB1B881EFD93F3EDFBCD86E87AD6BB1CC77DE7CA25F5
4FCEACC7DE33DB5A8725573353B099FA1D2FFC2C978686466F8D6A3A11ADEECE
8761730E06047C737DCB29941147F4161CB89BC95BFBC3044D12B8BFF1E93C79
A405B3283117FAC862D2E700A3A861ED6B2001203536055D18CFDB49A94EF08F
968A91389F1C31D549DB983DD54F142DB7796532D40C7BECBE1C6EBB43F86312
D01D5952DD09FA51ECD9B780BAC46073E4DBD66DAEBCC92A5CF19FC95109BF5E
69B88B6398464924D7635D7AD4D88D93C0C85487DAFA8359C8380CE25989D449
865CDF3B9BC487B82AA1E1CCD9CF2F861C3EAF0F421AC6CC18134CA9B921B004
E932567A4FC41D5C63CC424C022B0926DAFEB73E5341681A91D6659CBBE6FA99
B00217C9230C9FD5A87ED5E2C5139DAE9E8D9234555929371445FB409EA4F4A3
267A24909409B0F9CA0F9FB802170C734C899A22A7787783E0768661BE0923DE
D10FEC2654E629C71A5A74329ACE5381E86F211EF04538838658410720E26C3F
6C7710AADD9669AEB8F7F3B1F5249E00D70D4F243943EDBCDD4DC9E114DC689F
F60D372E352AA31D3CC7DC6277B9A56FE2E81418ACA16A1832E10BF74BCE3395
0BA37CF1862E8A9B590C4D5021F4DDAF400382AF55E0FCBBA5BC008E6DD1F286
37D23BB2F6417DB06F0357BD3B23146FE7CF364ADED41254CCCDED10ED0AAE46
0E2D19A7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E9EEC4FBBE9CE6AE8532B2CD4
101F1E68B19CC8756AD1987CCFF2302525BA8389489E8AD29C974C5A18DA8F05
5671EBB8954C3A90EE42B2AFCC9D2F52165A0DF06D6A365FB88544455AA87281
8C323EC616CEC04738328542CDE8B0B5BF7C93F1B7E133F3A0518EF8DE086451
334163D1D60B17DA2A733E28DB0DFF1CC06FCE2B0B6A6F13323FAE6EAAC2E140
289A9902475E6CE9C732FFD0344F1C8772BE74E0705D0904CE66DDE2A0FBDFFA
E7A5D02207DB3B8714CCD8900F91C87934A7E178004DDA6D91FC094A714F4A8B
27AB4787F38B78A41FDB756A5F2415403C8F7A99A825C8A6F37CE009152A0248
5C3A78D7E3649E597C9A8068828C2B964EB7976BDB0BA9541C3D806BFA4FB77C
5EBDD889F9D80B15A0764CB951D16524B621E0A4FA9D6F6F4C619646B14A25BB
40D57C2B958845B8788B60E408B6BD71BFC42CC17B0608329D093E1F9990481A
E419883FF01BB562BF7A8CD1C6CD40BBB35A568667C04C5536562FFF26C1CB5F
D8E91869E0A83A55638A573D81F89504703150AD673C8CF43B1D23ED27CD5E59
41D6326BFD00F8E2C46B4C975ACACB7A8A5A254A978CA100066CDE17ED245D82
EBD6D8A0E6E054359B579CD2E0064E5832E860F937F033783A442321927A1A8C
787CD363A398058AD4ED21814D5132E07D93C5A9B27F2B44615B72C93110F533
73C50E14657ED09FB27A350233112B0A339366B7373CE058456E0E1786B34190
AC06A6ED10305E09ADDC767335712B4542DA438A8FBC0A878608407B9211298D
B6C4B86449F9B3FA083CB2173152213DF47E7D07C329EF198E85BA6F03702324
345F9FAC6FA427A9DBF37C658288DD57DFF41A774A876ADAD1BD31E35F8B6C2E
FB81CA292E7C5BA6FB7CDDDA4209003976BE52A03A79C34EBF5CB4B9CEB57DEF
5C10691790826E35AB391A694D529730BAA8F75C5FDA4DBABD057D3F46466673
C2C816A836D1E36B99D07D17819B9F91B8D7347DA871E40063D57C1CAA5CFD90
04575AA9F1AB91191B962D64D82CD86F6AF3F1381F095C0379AF1AECE95D2547
CB2DD44ED0CFD23B1E1537ED3C83D34C8902ECE3FA1653EC33E4D50EE9329A8A
AF407145849ADD29773753BB577FEC7C1760D468320A79C6A1C23A69A87B4E59
3E92607A46259CE64EF5F3106A9747916C0BC2C46B83F574F370790FF793AC7D
7C48D9037EF31940A9C87DC01D4A88DE2D7515B5B6390EFA31A44589BE79A66E
6C292CFDE3ED8833DB255B8FF933A3F8EDEACADDE0FDB24B9AF2504EEFF2FBAA
DB48EF0D4FBBD2A0B5F8D89AAB7B971CC89C5334AD9996D31DF10C07AD641F24
AB4E8D98CA9421505EA0116A0876149EE60107620A89C9A3C8D1BEE4113428DE
0D55B98FA88D7CC258386B3D492717B438C0C74ACBC372F470DF8F35D6E5763B
312979604965F45E22266F569977FA7D7C2E62D9318B033223A9BC848420D62E
3111B09675FE9EC168A340DFDEDBADC1EA404EFAAF8B6194BBAFA142922EB643
DDEDEEF71A8C3865120E0C94D45E979D8392C29DD551188112A6AE98DB8CC966
2BEA42B9B6B8BD5ACAA54BD90BBD4607A2EFE01AF44913B89B791C0705FBF788
CC8A140549F78FC39DDD5FDD4700A56CE71FAACA472DD4C414087CAC63717C03
A3BD2215FE1427DE6E2BD8CF609735E847BAA0635F39A4BBC987172D1787E014
981A78A952644F5EBCC01A305C08EA4625C11416445E836DA7A3DE9A5C9CDE1B
9D487602DA79C4E845D5BE3CA6FDC088B462575052983010A2EC593B475F94A0
EC13432AD104E1E588A434ED028A2F301EC9B98B537DA47285A073A818373257
7DE94ADB70CEB5E6713AB137AD851808FA65D21C48BD9202CE0D5356AF6C40EA
820653A500302F0411B5ABF7644D03E17F39733E90B60F0DB14DC64C38FB8A97
C0BD6AB5AE1B5FAF5BEFB6A168497DD3E1C0933826D1472CCA9CAC4FA61042BF
B953C5AA0EA645772F1E38F523455AD0219F22C6E5E6975D49BABDB8EC50A3D0
6D3366B8A9C7D5BBCD5ACBD7B86D7E1BC311C99F108D54FCBE543CF02200BB9E
6F1B1B21FF80E30DCEA5F40F504468056D96AE7E0191A21742CFA51BC826BE28
4AD55D76AAB3B0B477436A6CE794BFF0ED77A7847F7CF4256ED2C90961ABCB4F
B89BE2D0D207C80CFC47E1922206029590608C6420183612DA9CC6598BAAC380
D6BB40A876D2BB649A5C2137F736756DED63CDAF5D281C0B5F2BE9E890D51816
AC91DE8D6D8F93A35D8AA2145E0598557707267CB6E58F6D9CA6F5B88EF3EE14
0C0F8E398980C7C6DCED448D1588FD8922A47AD1FA0D16BC1371BF8A5B0B825D
B940B2125C16F982248B458F7333632DF0689F1A97B9D3262AC9D1AED22C2EAB
6245270887C0AC4B0630AAD1FC0B5E43AC491292E89853DA1134B7EF26D10EE0
5685EA4B31E5396C4284C3376A9F2841845CB62FDF58F84CEF83450F3CF96D95
D7E8418BBACFC660D888697296B7CC6581024CE279915338141E9AB69F495A99
B90D08BB5BB166C8B086B68DDE13F0F9671B2E7E4B03C30FD2970B441E2BE97B
E3301FB1AB1AE471287800936B812CBED8EC490A0D20DAF926714CDAA4F27033
991B1F87394EFCA80910807966D8891E5DEC2B7CF1F0735729DF0BE8248379CB
883014003A83688537E7372AEDC5C3C6A0A35AA798B36A639CE43E1626BD630C
586A1B9E693DD5E13087CCB081525297B7825E3DD5811D120397BC4E99CA81BC
00F5A42BFCC1BEE3F4B55C915EDDC4EF797AB5BA780436BFCF090DB5258EDD6D
D2D3D8D432BCF2A1327946C0452EB9D98935EC3D0F5B8C908C2C0C98A2AB27C5
40F6C2DCAB024D70CD8C61094E9F62F8B68E9063DE5DBF62DEAA105FCD48375C
11A3207B5A381FF8E1C1643B72319F54E9E05755F04702A145F80D0767633110
20DE81CD6B0FF6176C13E0534B375CDE3CA6DD71417042F3BD4C077811073FB7
3D34FE110BBDAAE3FEAC945D0B13537A1FF73F6FE73832342917B787EAB33859
38C5AB8D9339CE85E9CFCAECA09A5EFC4B8BAD82F302202D6F16C85A4E041B69
FA43F45E3CC5AEF1EAA75C13CDEBFBE3095F4AD5511894FC96D2DC150F2066AA
14C9AD8637C0A9D46BAF26F0F972C21160B6CA96EBC63973FA5252B91D5A5F4C
5C43BD3AE9951AED115AE9D4C6ACC6F2435D0D76E9D736E3151010C009597BDE
A4E71E766ACED16A5604C087434725BC9764C2D0197FD7F78E4350BE0456E012
3B8A66637104AF6D51F958351F79A3CEE00BA4BB4417CFE9A19525C359628E2E
6646C5E9FE57427218A4B695F511C8C672C15CFADCC8BB860B8A7F1868FB250A
E64EA804C9B15B831F57C5958E7D0F04A31F910F226E5659C1DCA754741E7065
C0F597855AB772D65A7D833B356E0E8504F43588A91E4F949B8EE09286BE6A27
B64E12134792603DA7C6791415D0CD2652D26A8D150DF88F4AD91D7E8ECBEA88
56911F34F86641F2DE527126363C9A3AEDC52E192282E96049F91E1C73DA7094
5B9BCC22483B0FCE601FBC09AF383D10F3E9CEB691AA725EFF8EBB73F7588F29
63154AE9EB36BC05E2A1757FFFC4D76702999C16F48B4D776C649A966ACF3A2E
A4E1A00D74B44188897585385AEC1A36BE667EFB34F0A9892A0F204BD0010462
FAD3C1DECB35357B259F07B2DA3DC2BD0686210CA48667C50DB1D445FBBDE9AC
3DD31259692E9480F69F9AC675AF4BA063CE6B333C7A8788D52F6E1087A57378
BC2A12E35395A6F75B1BFDC238AD7A0E7D0E43F409FE94F7F610A4F1776E55BA
2372E3B03552B9B0604E1D39B08E1B92BB736E53A16782B508F27048A1CD20CD
2A63DB7D27E4FBBE3F4D6DD333E1B2231A094C43FF8BEF86BF710643827E32F4
BECF445DA710904CD98C73D389922AD6F49099F031F0DF9A2FFD28ADE56EB2B3
4A38BB5E41A398730C64BFE7166F7AC9B7A2D6B2C1468DCD65C961DFA7A9D758
0AC15BC89D1266566924D6087973C557588532474D9E9B852BFF97CA0E324594
8F1B06A1B8A026B3CA477D4CC612D0DC8CFFB38E627F19006CC52D9E451DC214
50FD3DBB18715AF5F202F8CF97E0E1A56C6BD10BADDFA6BBAB805D099D711D6B
86ABEF80DED110C7B0C9E17F1834BFA8B62B6B1D5370A3F98510D85CDB54556B
C6C7FF68FBD0418A8D4DC7D81815E0260D9F69D2E42819E144C777231AFA8B15
0CEF52C48C478EADF2E58D3CB1CA23A332D31DD85F99B731FD69660310F8FCC4
FA18E1163319E91CC72D886322215C39B882C0D27058A6856E3D6F3B115DB5BB
ED4D1E9468FA389C5A17ACF809D55A5BEA37EF0F904A177D9BB14282318170E4
CB4A631895CDB7C012EB77399ED604212A69AAF9CD208341D8ADDCDB0A2B5270
3CADE3051397F92F5F74281FDDCAC4ACB4BAC9DCA594DE2D198A95A1770C42AD
46C9BF5DAE43DDCA989FADF654D341B1D24DB58130BB900AC212312E72405AE4
8DD9300C15FBA6A097C02857ECF91A391B805AD1067173FA919FFB035784EC7C
16C23BB995C1C92391B5C819E7662A2B9259F0DB23A42616DE9B4CC3BF7B295F
B8E31B193FE849C489609E57AFF02AA967B12AAFA1C947B5D467D56929A551B8
80862797EAEC772F805985BF7B777B16C0F388DA2D8DD685BBDD2D86B42FF91F
448B082E269619F25E1E0182AB4FFE58DDE526371A624D6EB879F4A7F4F84113
54BE0095E9010BED04A659E7700FB4428181743688E0C1C01935EFACC0728D39
E3C0D01FAFDBF9F26DF49EDC8CDC020B4EE57F5E7D65ACD4BB0F83F0C5544804
8FFCFE87BA5430A08F940A51B9FFF0A903F49F54B1CF096DB179DF273C66B80F
576A9612CDA59DD2D3587370CF80BB50E310045B290221CBB5865434B49B8475
03EB342D4840BEEF6387E439FE8274521A569ED922185ED2208987F7CA0E3BAD
22AF0639EB7694BA92CFB5CC9DB82A8970B3D8BA6CD43B3E9546615A0E247A33
EF4D46CDF1277FEEB225EB90EFE181375FD227F0EA43B63EEC52D35735294E6C
2CF2FC4A86A63FA4D3164C5092C2C8CF8F5BACFE6A198502B7CE825496918CBF
8951E364CB3CF9AD093AFFEF94FD342BCD364D46262F0331241D87492D92E893
6325CF2A10222F73FC4B62D766B257DB2E4947F750508B0076DF1E688B47D517
87BA9027C34F29D2599CCD06FC306E6DCE1A97E520CEF18D77C93470857058A2
D4E08CA6D84E0E7DD748B8F839254BA9139D345103CB03226F4431F45D571280
B3333419C677B64D3F1A150213ABB3275655AE2B5647CB5CD00EBC7635AEDB3F
00A55FBC1D60A63F3A1388DF56F8DF2224597766D01BD59A87CD3FBD9C6FEDA5
EF8B6778869A1713C9B0AC672EBB9E802B8522CD9775285CCCC1D8661C4F0611
41B6A8A0B1BE1C0F33FBE2163E9AA0ED9FCB266A9B8703CE4A583D810F0E0244
64F875A3FA9F1684F095F8B4E902A39BBE63FA0DF79946504B5DD7292B4C730C
54C87B027C202CAD95C87793D5F78FF22EDE240535D6E3DA46246DBCBB8F3C63
EC967AB33A8BA1A97F7FBF66B7975CF9CFF2BF0797C5693895A96343E8AB987A
DAE9E0DF852A320CAC341FB68C0D3A056F898C99806A783C0C3A270BD17C1D4D
030D7C1CEEA75E89657F39990AEE1A43CF2121441D3179C371CE734218C9FAFC
469B5130CDCA478D1334E9CFC99A79235175BB2327116FB6BBFE28357FEE85F8
90732941B4125EFDDF305CD5E1DB54AC32096BDC7F94CE6F5A31D3E251F9F07C
C1B02DCAB104F32FF31565B48C512036A986387D8E96689E912149A342974F55
9787002F6043D8C28B243B40EFBC2B0CEA15584AE44B5F51C33A335A0087CED3
DA9536E86992EEE605F6DE12BB40EE929BEAC72DA72F6DCADD90525F50450567
79E4A1CACC6B085FA277618AE329A8E16EBF2042E4467DEE07DCB386AFF0590E
7538C12A28B8992CF66687696DC498FBFB766A042FB649E4F4DC838ACA8139A3
6F159F4098E05A955C7F48F43D52DEEE3072C7475FDE426EF155D3D69A5D50A6
D77FBFBBC7A75A5274D3D4D1018B7F8DE4FB7F5EE09E44AA058B5586555717CE
2433A4B91739103C0A217AE3313B8D619B84DDD8CD3878A4B306950873DA9A5C
5AEB1EFA22BB67887DA845FDAFB536ADDB258D967396530E767B04DDBFE5FF8B
F5AF293B9E77CF5891BA734FF8017C5A11590CF9889FABE24A849C1D3E652292
93915152D020A9D53747D9D0EC1EC775AC8274FB774C7899723DC2246C0372CD
1C98F595D3584BDF5702C65D51E2B192ABC32A106633EF6021BEA768666402D9
8144945F3D3E91D196A62C05C0E908168B772A1B5239C9CC9CBA0582C8D60869
8A04F21D03ABFD8BCDDD98CB487B44D7B1F5302866A543C8B8718C99C87B467C
0440CF4F0702DED1F038B538FE3AC7121BA9775B758DC17A9DCDD40BD2D1E47B
74D628825705E25F46A0C1D1C6DEC1934A1BD71E0B290F4767CC57D68EF0DA5F
860D9F67A6A66EC8EB8E023B821BF84DCBC08FEB001B8DE24B2B184D6590E057
58459991D6832759EE51FF87B966FDA5AB3383F60CBFAEE9011FD7401581A292
A59DC0E681673154A2A2604D011815BE05C23AEE8027DEBCC273DD6E55F10114
4860030A97E61EC29FA21410AD5056A7331A948B8131431A1DB66A039ED925B4
E420EC1517949D6ABFFB7D9FC854BF3E20A73038F2BD23854FBA0446A498C624
A0A39B074E4E046C0595E4E1072E3E36764BC8A2010253AFA311F8BA39514302
3C539E027B74200166B2515C5B20CF8EC838D41D58EEEA312680DA64C30D35B1
03D73176C8E1606A061E66067F33F3B31609AC2AF79ABC77A6717A1AECF7A819
06803F8F091083A38A0F478AE6465F7F11D948FB905A2962182A10D67981A4C0
A125CFC22F5B71D2EED035BE044EF2624694FA389C360BA75FD204EBDF64DBE5
620DC5BC01BDEC59B3626261DBD814F7E03C9C11BAF18F9C52A04AC154D05779
3530AE8A6FB1E401B455581FCA7D231E19A582228DBCE788A918261595698D85
C19F9CB623B66124203536CB84B834B9246FA50E215B8D5054B93A43129A8A6F
B15CBD828F521F90E3DB07D78CE919C5A30C6C0F16C549C80856AF1C63F83C4E
B00D8E8C8E044398EE129C3BFA19D2ED47E6510370684081CB36AB87D2EC3C17
687F46A0B58C8CDA52E748687C05173CEB8B8B5005FE146FCA39B0B532E252A5
E4D529237E29F250DD6D6EB3EC319EA127E5C85D05318C762E5D9E0B3809BDA3
1E4B8EC4623A9386E40207B269ABCACD4DDAD5CE9F257EF558F30D05B81FEA71
E4E811982D820B6308844491251E90996812639A0C4AF19D09EEDCC0C3C884EB
461309FD32D488DA502C2CA5E42BF491BD99B70CB4042B77A31F9F06A194C646
073AE004560A16DE23C88322760B5EA01C3761DB233A29CEF4525EBCE7AA0F68
375EA6894B275D26BBEC215C81BDA1A9E3931670E08C365BCAA589B9FB46E97A
B020DD38D71B7928C25E11A649B80FE0359DDB6B5C1678F2A46F79737158F232
FB2EBC0DDDFE6235155408C85B7D23ACB3D33E5D5A9722F16CC4E133B5977823
03AE572A44B7D56AE4494B10281D96DBDBF6BC7298C4A23041E604FC5587084D
D4BBAB169CD9C902A79DCD5594DEF550332B9AD88A6B03E46A89D89E8CAE0FA6
B73F708EE28AC6A5DFF5C281BE8C36C9EC5AFA0F3E8D1764CF982F9CF07D450B
0C052FD9F8B989252074B06EE788B678DA317AA3082BCB9709E40D87ACD1D9A5
2D5C7D2C9A7F62F62F4446DC950D4BC2DEB39E875699AB0AF95D9A9BA172F546
AA676CDA52240904B8462A2EB5F72FD0F427AF5D0772DA9B71D3301730270DE6
5DAAE1DF4E6B29D74A84D749B8AE09015B33E1B0FD6CC74FFAE2E26DC36BCF2E
C97F707E3A9742F8C5D2AF2F743A67AE4DE67F74C83E61AE6ACAC8F537209649
E99CEEFCAED8383B59C17B39CAEC19C96D92E456D2094FD53D8954C26EC5239C
7BE16CBC3CED26BF537D54B6B06A04301FADAAED155C6208B150D385068DEA70
F606253FF3994E0962EEC3C6130613E550A20331F829123567309349F8C2AE7A
B6E1F5D11BE87B81D4B3F050A98CF43D73E616B8E2D755C3B8B5FFF74AB7A93F
A6E98BDBF02BE7B4C35B3B98650E771FB4954BBC19648D896B48382CCDFFEDE2
40D483420C8089E81DFB3BE95AA62E1098F3DB66448653E536A3D89386E1431C
515230F3276F25C7EB68DE604375D3D9AB22AF9B88E1494C26EB8305F645DF1A
4A5582FE6AFB6816FB7B2DAA62C67E2781E73450462AC1FB753A41D8AEF0DF67
893C1D06F5D05834BBFDD27F19E63578110A8079C749D8407CA5E244364705C6
5569101693F0D22636A00F43261853876637743D5DB12B55DEA614613231330A
E3C852F9D90DBEAA3E768CA50B1C9951D8A457A402D4BE79CA9185388D39808E
F749CB10357090B275A35DD5A5C1AC42B75BFC767E6628BCF2412425C50A1D3A
ACAB59161ACEAE6F4E4B0F768289B87D7E0FF6D8B4CBFBCB81A8E1AF7A836F1F
BCFD7078DCB3FD28B8EFD58FC08C1C182B4C102F21F26DBAE2550DD4AC290D1A
77A807157D008ED5E21FB1441A82533BDBD442C300CECB4E4BC1D7C2248A02B2
F651E285ADA3670BE445CF3E80A5A2252E6E03D9379E60F07FCA3A0267E0824A
D0F3429D82867C6310C34A6BB981E720146DF8C5662D9179DB58C1BF40D7E8F3
10E7202631E67B145AC72433C28347F34F7C2E53CACE052F094F041ED86EF683
D0DC86CD20F7F6E24BB252ED820DDC98A7406DCF9444AAAE42D0F64F64AE29B2
85C59264192CC13EA5560FA827C10411A84E13DCF287E7B822B771B12ECE2CD3
FBEDCC43893291BD3E9F70FEB30C04A28B59AB221B78865E7BCD7B80155238AC
29828D7AE27927F1B507FE717A8D7C5594283374416C3D634BD2B401EF0905CD
5A1F02E92E2741E3E7627A0FB6FAEA386F7E0C7FD9BCF3E25DEF639716E0061A
1BB2D5133B2820D677C8A169B08C8A5FB5413AEF6C334C9259E217BCA3CECFA4
5ED6612A237F0F0FA2170F32CB6394B89E6D7BDE20C8F6A6210EDADE29D28FD2
1894744C824E290A9458337D34B6BC18A86723F8B65DA55510015611FCEA5604
7754A08FCD26568F78981B480FE2E0082F3D3D20FC294903B577BA8352BB68EC
CA71855767468FB113F2B977937EFA387C900B4DA8A83E595F780A8128664A8F
14EACA96F62D520070772C3C915142A15902C90156E11BFD644B741FF8F24D7A
DE39DA212C7CC084F68DDE5EBD3AD2359D47B699996F4E36CA10A4DAFD12A796
0E5699543AFF02ED4C112B8E1D09915A05E99E397F733CB9F86B7DA487BA9923
561D964289E5498429335AA79CA0404BDB5D87C654545D07EC2C0FE66F333457
ADB4090F181B68C4F86B0A5FFAAEA924D8AC0D1FB115CFF758DB718C2F70EA6A
A6661A2A11AAC76FAFD350BD8098E2E54576602F4C6B8916458AC9F8A967779C
C18BB54859C5D45F54A7AF1CFD4D07E76C4890CF9D910EF56C9E04DCBFC5AD96
903A5C77B675F10EF3466C8795A7EDDD68BBA96359EE849305A05FB99890D4C6
AA4FFAE24907573C2C7A684F5B33918BCBDC61EB37DDC13BE36E061B9FA20CF2
EFB322802DE983BAC37FB15B6EF1D0E7FBB579894046E8E517AE2B914AFFDAE5
D2205E9EEE3F002468ABFA12183BD547BB615629986D1EE245E36578118593E3
6F81FE76625F98006ED5D9BD90A37BCD6E2138285FF591F36D627B21793D5F11
9B070CD50AA922F4BEFC1F7A691EC05AB5BB299B190D752260FFA82B9B3AEF5D
3C3BA869892B64B6F821453D1DA3356D2892D871B1D1EFB34B9F003904ACF820
8EB88D9CF151D4C1FAE04D51A9D0C3FFD7072827A1505CC4CDB0256EAA9D2AF1
C72C5852CDBFC0FE880DBA07B832A01384198E068B9B5C062C6CE79738B61834
9FC6ED24879F02A9B2C2924CD9E921B84E222360BE55223C56908D00199B1D2D
941076B1C64D99BBF5ECB0658FF099EE65B791C63EC6AF40656D93D61DC475E2
8447EB420D12CDF741FC2782257F20E4430D53898C5BF6FC74B2621802B29CA1
6DBAD0A2BF9A151AF0C9C8CC031B2CAF4126501FB9071E10C2DA4065A3082BCE
2A339FAA84C30BB2902C2C710F10B80FB6F4E4F6E201DACE81B2FF46A7BCBCCA
74B6D314B33AAFF216180CC9195E1AB0CD9B4F53D76767CEBB5907ED1D486993
1AF8061B481165B32528BF3209DA0DF713EF4751FBBE4D3A874D9B48C1C56AED
7E3E83B7E7553C1B442FC23FA71F6907252A72D4C5A31E35448577FE16CEFD7E
022E6EE60A5177B4BFCDA309A53AAB5DF969563D2BDB024A3009369054DC5695
3C27F8DBCBB3C0DA272517598EEA4EBC04F1E6F895E245D8C80A9889A92EB9D8
8187D73523109B0C1132C14EF4FE416F8FB3398199BC7AEE58660DF884A65817
E8F1A88692D4F22EFC3734F30C486A8883E67BD4EAA01BC51443A2F2825B3AE2
DC70D95DD5B416C22B540BD2E3DF51DD0200F8E6172063E0FCB7C151ECEE56DD
B15A6F060CFC22CAF6E8370AA3F656B45B5E0C1CAA34217BC77B1E075A4BB991
45EA55CFD1D12CB282E661A0C239F01DCC55940A347AF0D0EDBF29C1E6DB9044
530563B0659D9717F0BB4C4E8B8101FFAC7B89E2EE2A4284647137F51242C7BE
EF2D574F2F1413B4C6B70795874ECEC5C8683B558AFED820387436E05EE2FBC8
24BE899F9B84DC89457496897468652B863C1EC73463AEE7F2E7D41FAA5D1929
4AD7623E060977AB9233338AC9054B7A4389BF54308B3DC9D10738D919BB7312
84406D3663E51AC2C563B89563D0254194DE000681912B10DB85A64E19314525
F5345D90E505AF1D4F053CECAF32C443F4A1B5C4BF78895E49CC6FF69C287D24
3D18230328745F846A44428053C6C606216322B5CB00EB119730E2AD62732A8B
7FDB687D7D2D4F88BCA5BDB27598E5EA6AF85E8BE3A69D94C97D5FA7F1C90D70
B5187331B37D728506E8E126B9954C872053CAAA120EA654C068E4B56A35C083
AD0DB6CC37838A647246405261AF91B148B03FD356924C0441D7374EB8E28519
65E5543048DAB86B39E7C589EF576D93988FC7CBCE8F8EEAD343EC3BB2105C88
88BFE28466DAF1ED2B1C0ED15D12690F9F0EA1C8D3DC6F3AA19E84C499687B69
EABD78008B0695E30DC4F8506BE72C7FF3A2C3D5D563DF369228ADED44C8412F
8BF642004223C0699DF711096746C7E0FD54196D6E1F16D042A4CCED69223AA1
5D485A40DE1140DE6AB73E6DC8067958346BF4C4B8B877F6850C5D13503F892E
2AD3A24E2E90D4BE04D525BAFDD52768BDF1A82F018B9598F17B53F849A427A5
870234E368DEC1A6B8D5DF741B5CA7B39A6383A5CDAB2CFB5B30B3566EB48440
D16A80A981A5703464B9F74DBA7B6B88A28E3C976E64C24E8B2827D37EE6D7BE
7A1311BA3AD03B0A0B872E5EA8412EB8C304BB5C18BF8300E8B9ED08ACE95939
2226C2D9AF9CFAE9A21722A92D55AC7449C21E216CE350BC4C84C905449F409E
94F417492DAA7D861ECBDB0A1624F4751EBCAF4D48E95FDE6C8C6BA097251AF9
91FC48DCB5DC6BAA38B4CB34CE674630BCD281823EEB1A7B0BC36A0C634658F1
BCAB588A44221D19D368C7CF287C86989AEE0486F7D845B52794B1D60827C1A4
20DC079E3FDC29022FE4AC2173B490ADA40CB4E9209DE21B799AEE655E61E18C
B57B816973A1B357EBAB1A189F424831F6578541FB21A36E4C6FC0F87C71FA95
D3514F04CA9AB516FEA662832F3B27071F01A7399AF55D0E2BE2041FCA3F3BAC
CE7F8DC9DC6E3F8099B9CB8617A5B9A9AA4522C68E554D3AE203A1EC23FC240D
9E8CCB0619A3539824DF0F9A0626F1D3861E1D799628816A876C6FBAAAF8270E
008847247D66D8891E5DEC2B7C87192EFDA892E8AC1E9B5760E1AA4AE02BFB55
05446B53D06300E8975FAF42C11E7D532B64A356B32A047802C9BDEE75029E99
1753E1767A568AB4C2B2317D3C80B1A70B71AA537516A6AE9466FF1F523A2F17
4B13F64268A18E8E77FF6F775ECFDA9068ABE8C13BF3FEEF165DE8C3E9109949
A8FC60CB1A95AC92AD30C02EE0CC7F10BB2127F7C006E1403DABB295201C03FF
1DB6A72890DA790CA888CBB2B02E1B9267DAD51797ECD80BD00A9DEE2735E8E8
62CCF2841484D4CB60489301243B26077869C293C91CD0614C4EC9D402831AC7
59F5A2408994BA01336B26E24D6C4579B1F21A1FCE9C61309427DD2329A61BF7
FF7AA0BBC9380CEF3247C16F25046FFE9A26F92D0080B9A9B095411FF757B6CA
666560447ACB3776E3659D031F8AC17BC63234A9ADA6424C3A0DA12E12B2D3EC
BF416A0239CEF2093B7152AD806F47CA6697C38CBD84A4201D003DEF407CFA5F
B246013F2F47C553F9AF90DED58CBD53531F6E05C85F873A5B37B6C1293F2164
760EC2FF78A7D0507A3C90D6DD47A8430E91EAE1D96A18FFBE1CBAE8F7CCA6B8
5551D48036DDB9A1D91B5836B39EFEEB7D24399CF948AFC5870D86E1143B9B26
7B67C113A45B51F715E56799BE67C568C5B4E17196D138884423CCF26AFBEF44
0919EB2D5B5B1F05C34390A79ACDB78D768D957B43CBA4CC50F8131D57A3F93A
E3D09CC732FB93CEFDFF737017F7D22713569E14B91C2F1A8D34B14D525E35F8
4CB83BF33C020370351293DCF030A9C2556E37AFFE1CFD46EE8ABBF46EB53E69
14BCF2803AB34267AECDE35F42148936D4F76E939EA1AD981F8856FC9C785BD5
BF31BAA4D3F7908DC5816689E2F0B887D2C295254978D26484EAD24A740FC920
49A9663CB16832214B8D81F6A7958B1C5316DAE8A297AA3502A305997ADEDBCD
22B584799F9D96D740E5A5E4F5EA618A5EA3629C888C108B280CABDD1B981FFA
7825F3DDE08B0D4174F27F62A35CEC31C951A0C766787C7F5D94FBA532977D44
D5DA5DFD18BA852995A4C4680C1517091FF49D561D9D0535F5320F630BA5636D
83FA08E8F0F6662C2748B224793CD97099C3CDE86752D8DF127FBD175B8602CB
67E1009059B940A4DBFF046AC7B7D270FD11BB4F2DCD29FE8CEC353AC3E1BA2D
47DC10CCD931A1C398CA0CEA90D81751F32F2675EC9193D8AF0BF28440F982FD
D14D1A7EE1092A4AABAA210136BBB4E3E2D6AFA25FD8365DAB6B55C50AC090AF
12C8779E05827CC2A4C81187D76ACB57E236FD0CD97129BDC92CFC4493E40918
3E0F7D9E65426949E08F5643412C907A028601EEA451E36C5C7FDB31E1A4C13B
8874C5C283540EE0E880CF3D14426576998C6D3C8281C170035DD6C898A9E79D
EEB1E74DEFDE00A4189E36A160EAAFD639BDC06AF371CA6A472B03F97423B123
0A69C99CAF2C6C3C353075D1764621CBAE00169D0051DBA3E63CECCC603CC989
644D931313D20229F66138BEB06DC30ED8E807B3B64F88A1F407106C08301528
C43C2183A3A1DE6E63FBDA4B5EF9003CBD75DEB9BBAFB5D2706F7D50ED256942
3F8DA9735387117136A98C797FBCE7BF76A41D54D5463755AC5937BF8A0C7C0E
068F8F94EB9FDC18E9B4DD484F04F466BC0371DAF31D4FE5DB87F971C61E634E
05CBCDEEC44D2D45B304263DEEE87EC662396A8C02EB51E90837C92D9EFE9211
882803A5FFF74BF47E8032785B3B44053516551E7BDF1BFB0989617E1F86DD66
67AECAE06C2B734F9655B348A5399627FF4BC3D6663807419C4E15A783775C07
70E65B669093B93910A726E636BCB784B51270EE7387038233E06E458F344BEB
B7E8945DEF906005AA663E8225E9ACAEE79D81AC222A5FCF4A3693BDC05E1A9C
18F24C9FE8DB5D67AE404EAA0A489C62492A07952995E5EA1B4038D6B14D5E39
E83B8E1A44A65A16EBD0C084D9B60D05DCA155AA6236A073A86AD62B68CCC2EA
639EFA028F4314776AEF410232A2BE28BC6F722CD7CB70B02FF33A46F453DE25
7AEBA28F6D60ADD0E05AF3500EB89489D1D85BCF513C70A68C783C0BEBB6A111
E451F433F17FB8387B75A64DF2E1C3C41254C4CC6300B1E7A042C2F1B7973AAE
A21AB2D8DFB70D86EDC14F4A274AE8DEF6DAE1887F420F38FC7539B2C02BDA7B
259634985BF96348B2638BF5AE6AE2BAAA6B648064817A8D1C74EEEB4474E4AE
5E3F7F09BC1DED71CD81021A678BE0A359389F5131FA0C4C96A6F07651413DFA
AED9A35775AA466E2BEDFB23EC89B02C0B64B9364D28C5DA8EEC905C960E06F2
1CE72C2ADECBAC1F0DB67756DC3F058364D931F643F660AD68D89266F6AC2B52
F2B9E896549C80D577222100873BE32B9AA913EB9708EAE85C1CEA2EFD9F2D80
65875B356891D388C4908F18398085937FB2B36ADEB0FB6B9496FEC5B0CA95FF
49CBDFF08719796983FDEE18558BF5A79FC8B1B849623A0E2AA27EF2B1ACDD83
9E18411FBC48B987AD6C28D34D9EF0268CE2416DFACECADAE334EB04C672E85C
204B1E7146EEF3240A5F6A86DF4B5444AC4F6E541442F9DF5BB77DD35458B64F
8869F1FD5DC77CC4048F0C46E285E47F89087C129DA08ADEB2B51FD97C3B94BC
45F7DA41C037066033B999B250F01CF1140EB50477D22B83873EBC8C23AF600E
6A2C27AFDA23659D1DD380298D5B5012E52455D10E6CAD634CED5FBCE750FC2C
8221C48BE043629B570CC7E292F32DD87CDA4C0C002CEE0821ED9A0A1E050A14
87D70D16CA5745CDB2BC5DBD337149FF8B2AAC28798E536BDCDE6E5AF145A2C6
FA31B11430A2FEA9E953F2F70B7D4F27B38ED804507191B845CE8E6E36D0D2EA
292C232EC3869094351B7DB70F5ED86B583E48C4EDC89A0DF5B059DF6A60EB75
B718C82B24CDA480930D4BFA2D10367A7C3902E49A1BABBC8CC789B5D6D4933C
7C2EF8AB01F45E938B057609CD55D05D554E8E284C9565AA7EAAC25BC3C6A24F
49F46698587067CDA23401AED1A7D1DCCB0D28E1F56CB5D5F32109FDB9FF237A
3323A10EBC8D50390A0AFCB8045A1DBA310851D9B8D04EF19E80F4ABF265B6AC
FF32852EF103CEE775C4064934FB530BA5639BEAAEE18415EC1FEE074C4C6A36
10332DA2EC9C475B625CCC296F97BDC6D5ADACAB7D4D47A109F150A43AC7AE67
6A7E7A4D3E44534D929611151EC9833EC685885166F3E23B2F4B0DE76649BEA5
587A6FA5D9CDCC4668AFB31943EA527C246EEAB04D077DD179AEF1B5D5C20F3D
158DE5E3BBEF17DB9CED994238C395A81D0A09A260A4D88CA8A9AA20750A178D
ECF6703F0DFCFF97B83343A8922671F2E08C8D6993B716FC80336B69FECFE456
12E41328A48BB209749CD859634608E8306BED859B5CB3E61B6DD0E28928A3BF
503FAE04FC2EF02ED3B94F73D00ABF21B5FF4DC6BB1942DCE8151D66EC292CEB
DDF07C292507429A3D35799C3496616941D3CD58F0BAF07633CF25E185FE2092
47B9691246A7A210C389AF948ADD6262E635851EC0E21AD49A8F86C947FD691A
A4494A4B032A17AED1E682016D91433E37A2FF8D33969CD67661FAAB8DF0EDE7
B71E6A0FED34173CAE632B6EF827E00F8AB9E2CDE9CA1326AD901B53508031C5
92F83744A928695F14C2654227C40EFA0F0A33CC5DC0B94B44F8CF7B29AC7A77
0C6005BD478971E6C7376835B7C4C6B78EDDB18531073951C59F3E09157F24DF
5ADFB56544515DCB3B97CE2F30E15C529BD9F33472C09306D2110DDA89A3CA7B
4EEB1144C962667E83E10B3D0603754C875BA91CE23F4052C4B57CF3851812E0
1334374321DBAEDC19412154BAB0C1A4EF2BF539F804319AA41913346455A098
FB9F4628937468B947E21090B34C93B15A843F4CE3430EFF113249AF584143D6
1665260927948BBE3F0EFDA19674B326DC4AB1562940DA120808448B3689AF26
5AC4356CDC2602326E9BFB40CA3B9B5067EFBB98E648FDF2AE26C19DB24FCFDC
9701824880C1F1CFF9401677D3CCA90C6D724346A42C7B18018D14BBAF2CEC22
1BE29FDEE98807B6CB0E3C4AA5F96B3D866098D494A9385B1943FBCC3070860A
0EDCB122040F6D2E6968BC6EB2B9B348C6596F65413FD585272D12C00E130C32
7161A62954570FD51AA862E6E40EDD52710E113C7416DCDF9FEAD90766128678
76262C9AFDE708142B9B408690405671F20F52C94E6609CBF4A5DC013609E4A9
FA0B806FE0C5B7681A25BE1248F10B14359418CE82AB4F8E7D800BD8327EF443
FEA5210594646A5B001BE8D1F63067E311C3E407AC2BD2E5BA6E9CCE00DCF7C9
1D2B0A07BFA9F87E51DD60C89F15DC48646B26EF18EAB42529A129024DE2A791
6939A831103624D64A4D8D53EE8ACC2F1AA1BC253EFACB7155F811A0566A2790
8C8B5EDDDE6E1341EA5CE7F8764DB8CF5E534D78E989C264B722D0A4BC3E3A01
D63F1FB3AA5A7FC70778CFB6BD9B28831602F318EFFDB30CC8B4323C905498BF
230F2A5A19204DF8324A0C6C4A052E52ADBCF52C06A6E49EA5F275A0BB471746
F5D2D266FF89253617E6E8C8AE9D517AB1F0B780390D43CF505B0CC6B2D907BF
DE12BD7A7989A6D32695A3B25676972B5D93E8DD8F1C218FC54FCF6ADE1AAC52
03A1DD2AE4935E9F618024D2BC493122F6BBCEA85CD0D09A00F4E0E09F561410
D0C561DEE3AE95AAD29A7165378F29112435D03CCC8CFBA2B1549A2534CC34E6
1BA428EB4050AB5EC4F289EB9CF8F27BAA46B7229CA772F930BD3EFC98ABD26B
E2A595A30BD93B66DBC586DBF2B95054772ADBB53FF662F5C9AFCFB213E1BB48
1A756981849D58D526C41EDF531D46E821750FAFBA8BFDC1E15F26EBB0BF437F
7B935C48FCA3C32B29212B3B31A77B443C786FB0EDC04C9FE7FFDD722C836E15
C6F345B475834C68ECC75214E814CF36635617EFD89E17EB7CBC9D9A1C9D6A3F
CB0C6B9218056CBDA09CE0131930C2BCF30DEC255A86BC076AECEB23FAD1FF52
D46681CC5F5F0E4E413DB6228986D52CB40F84569F0879F42C0A7C6BA8A06A55
271BB2B689309597F2CB8622C78A5677AC271394D8ED372A66F4E1843E58132D
9718D28BF9E9064BE6C06228ADFDC9845FFBD4537E8F7F52A0B7EDDED9650ED8
FE06BBF51728AE6724970F96C418E8EE0CB647F422E4FE55CA7A6F27643F32F6
072FFCE814DEA593D8C13CAB1B39EF004E576EF84F3825105B118B19B1C08761
1634C6EE59CC3B98CC3FD5BA979DBF6C5BA2E06DD8A5D0328EE3586C3E6D1F01
D67B7A6D754627B757AC1FB7B7C0F09341D526E09F1C1F34893F4EC2B6136199
E5DAD209B34F95BF4EC257608EB3C0CCAE152E293FF2EFF7BA0840EE770E0D49
5C4505A8A5999C98886590A29C5839E9EB01706191FC42AB61254C4C3D86F948
2A6325564534B1957C4C8051FEACE2527CCF7171DFD45841136EC60BE8B0DAFD
745638A0C4702ACDD1E58C595D44781F1886A6684025D18EE4130AC3718D2FD7
B91AF030F5CD0CD9D9D2C3C19996229DF4378DC42ECD65EF3306E1282A634C59
5C3FF9067235525FD625741739CBB050BE2E146ECBDD1603172DF72C1E28B1E3
E2DA5F89D12B02AD4AC79452691C384FE5BB5B9627754C22E329506E73ABFC46
5403FD91CD59396AE3B7F6D4EF8BA63DC27BD0F4D4C54FC9150A5882570ED749
E3158E572815082254F94B42B8319BD2422C24152B2069B02641CB1E1EF31B7F
B19AF543E8FD49FC9C8914C43C9D7686CA247BF54DBB3762244DE256D4C8E6DD
05B3E0E7E12B1522F4D9C90165DCF83C1D59D638EF155533577D2D0B69D9416E
FE76B7D194D3D826D315DEC1A019E2C000A413C8DEE50AF7F52CAA9030B7C0C0
9239EA3BE90FD366CCA950BF84808EFD9071DE65838D3FDB440702BFF0D462D5
EC09A175F05D2E940502CCAC60CD6B339DB8FB5C6F9E654060863E088BFF70E0
2A6EA284C4936CF6A801A139AA1A9F40FFF141297A8C8F4D0C8DF3F207869E70
971F07E3A3F37E3C362DC44AFFB5FCDF9C3F1D00D9E7F396C2F4CA1A17DDE516
3E6DCF8FAB43236DF84D1FB24A992BFFC564314D33632CDCC750FE60813FA176
8E640A1948E25D73053518FDF520244643BBA16EAAA595F754BA9DC11A9D6D9C
DAB7A0AAE2CC6D20EB599693705E7A1A461925612C0357BB590041E38B64D473
A4A241AE60992A3554A195B015565F192EC9AA4D8609616875A7176408ACAED8
67C365EF91333F528284417AD4C4799B8501869AF78680B8DA6750D130FA3131
4204C6DC49C35F641E4BDF673D152D04EB4A0A77026F386BDAA81F5A75B0ED5C
5E449A5C5E7CF8734DE24090FF106E83F714EF3E96284ECF116FE7215F1E5D6A
242D4B66723415B13D20EE915955268578F2749004DF109A11828A3BB6617E48
0FC807B17E8D571A4B7E1A95EB6208FA51693DCB52086EB67DDDC1387B44C9C0
0BE0A7E354A6A5FEBBA49A3CC9F474BE0F4DABACA818CA4B68823930B79CDC02
AE2BAEBB4C42ABC80395D88C6A2E8E2C2936FA5997B847147E46560865FF83B2
68E8A37774A713D279E9782929A1237A2A3B90C01AE03182E087BC6EDCE05369
D8E98918FC70FC2F31D28C3FBFC0255CCD708F400CAE2FF8B435E73723F4DBD5
F100A5F7EBD0A7DEDA5BC4B33858E74041857C00EE84152B4C010D00C14E5F72
D5AFD9D6F9118BA67C6E191D5E0E041453E38CAFC024BF469ECAEE09D24CF042
1C75473159F702244EB63480148BD56A9C99F21C2A72B3A767470A31DE61F519
DB2AB1901D5EC958EF5123584D5A350847DB04168CE2B4047429ADD9AB5091F5
2DDEDEA3F9B4156FE1A5C8B95517AAAC91CFD93D0474BEF5C8743351DC15F1AF
725E1043072D1049303BEE39283E462EC8CB2F7477C0FE1ED7067EE8984E4F1F
059FD1E30B07361E238FC4968E298CD1286F89E496EB8E057DEC494DD92EA2D6
579F681E28EF7BEA56F7DFFE223C2B719C162B798A0F7C3F2D52BFA083F99238
44CA60E83B876DF7DA68C08D49486C342D5EE7142C7158B0760F18A9DF401861
6E716BE34F33832AAAF091C930C2B512884918A1F9EEB173A7EC6E47F82B0022
51295D01DC4AAB853783F53BF91A221D26BD2B0179A3B97FA33C769343636E6F
E3CC22C826F415B01D83C2BD9C1108C31ED52964282A718C12F407EAFC62E3D4
B851A0773705ECE5DF6E49E439CCE767FB8F8F4B6B3F3CFA6C9CA936CFFD5AF5
4FB8F794482989C2A8D885132798AF4F755A792D4F9ACD92ED5AEF62459ABFA6
5F43E326E36932B968669EC6A97B99DF7098D49F65683E6CCC89ACF2A1DC7B66
B9B500A174E459C14C365120A0B77ECD3B59770D2F7AD33220A3199B3226F709
8C4685821C47C1EFFB1B3DB79C015AE785053E390EF26589956B26C0C551CC90
1AFF05296BA2827463AE627063B6D45EAFB827DF1EFB6D44B37C267066BF57DE
D9AB1FC5631D4A2D73
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (forsec_huang.dvi)
@start /Fa 139[21 29 29 2[37 37 1[21 2[21 37 37 21 33
37 33 1[37 14[46 1[46 2[62 42 2[25 5[50 13[37 2[37 37
37 1[19 1[19 44[{ TeXBase1Encoding ReEncodeFont }26 74.7198
/NimbusRomNo9L-ReguItal rf /Fb 134[50 2[50 55 33 39 44
2[50 55 83 28 2[28 2[33 44 1[44 55 50 14[72 4[94 8[72
2[72 15[50 49[{ TeXBase1Encoding ReEncodeFont }21 99.6264
/NimbusRomNo9L-Medi rf /Fc 139[25 29 33 14[33 42 37 31[54
18[19 46[{ TeXBase1Encoding ReEncodeFont }8 74.7198 /NimbusRomNo9L-Medi
rf /Fd 135[45 2[45 45 4[45 45 45 3[45 45 2[45 45 2[45
32[45 17[45 46[{ TeXBase1Encoding ReEncodeFont }13 74.7198
/NimbusMonL-Regu rf /Fe 87[25 17[37 28[37 2[37 37 21
29 25 1[37 37 37 58 21 37 1[21 37 37 25 33 37 33 37 33
8[54 1[54 54 46 42 3[54 1[66 1[54 29 25 54 54 2[54 50
50 54 7[37 1[37 37 1[37 1[37 37 37 1[19 25 19 44[{
 TeXBase1Encoding ReEncodeFont }49 74.7198 /NimbusRomNo9L-Regu
rf /Ff 134[42 42 60 42 42 23 32 28 42 42 42 42 65 23
42 1[23 42 42 28 37 42 37 42 37 3[28 1[28 2[60 3[51 4[60
5[28 60 1[46 51 18[42 42 2[21 28 21 4[28 36[46 2[{
 TeXBase1Encoding ReEncodeFont }40 83.022 /NimbusRomNo9L-Regu
rf /Fg 140[47 53 1[66 60 2[33 3[66 1[40 53 1[53 1[60
13[66 86 2[93 8[73 80 1[86 67[{ TeXBase1Encoding ReEncodeFont }16
119.552 /NimbusRomNo9L-Medi rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 515 125
a
SDict begin H.S end
 515 125 a 515 125 a
SDict begin H.R end
 515 125 a 515 125 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 515 125 a 0
TeXcolorgray Black 523 365 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 523 365 a 523 365 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 523
365 a 0 TeXcolorgray 523 365 a
SDict begin [/Count -0/Dest (chapter.1) cvn/Title (Research proposal for FORSEC)
/OUT pdfmark end
 523 365 a 523 365 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 523
365 a 523 365 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 523 365 a 523 365 a
SDict begin H.S end
 523 365 a 523 365
a
SDict begin 12 H.A end
 523 365 a 523 365 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 523 365 a 523 365 a
SDict begin H.S end
 523 365 a 523
365 a
SDict begin 12 H.A end
 523 365 a 523 365 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 523 365 a 523 365 a
SDict begin H.S end
 523 365
a 523 365 a
SDict begin 12 H.A end
 523 365 a 523 365 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.1) cvn /DEST pdfmark end
 523 365 a 0 TeXcolorgray
0 TeXcolorgray 1146 448 a Fg(Resear)n(ch)30 b(pr)n(oposal)g(f)m(or)f
(FORSEC)1762 737 y Ff(Huang)19 b(Xiao)1619 911 y Fe(Institute)g(of)g
(Informatics)1315 1002 y(T)-5 b(echnische)20 b(Uni)n(v)o(ersit)t(\250)
-29 b(at)18 b(M)6 b(\250)-31 b(unchen,)21 b(German)o(y)1605
1094 y Fd(xiaohu@in.tum.de)p 0 TeXcolorgray 759 1906
a Fc(Abstract.)p 0 TeXcolorgray 41 w Fe(A)e(collection)g(of)g(research)
h(lines)f(proposed)h(by)g(Huang)g(Xiao.)523 2088 y
SDict begin H.S end
 523
2088 a 523 2088 a
SDict begin 12 H.A end
 523 2088 a 523 2088 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.1) cvn /DEST pdfmark
end
 523 2088 a 100
x Fb(1)99 b(Rob)n(ust)26 b(Anomaly)e(Detection)i(in)f(Mobile)g(De)o
(vices)523 2387 y Ff(The)j(di)n(v)o(erse)f(and)h(e)n(v)n(olv)n(able)f
(characteristics)g(of)h(anomalies)g(in)g(v)n(arious)f(scenarios)h
(prohibits)523 2487 y(the)g(homogeneous)e(de)n(v)o(elopment)f(of)j(a)h
(detection)e(frame)n(w)o(ork.)f(F)o(or)i(instance)g(in)h(the)f(mobile)
523 2586 y(de)n(vices,)15 b(the)h(rapid)e(gro)n(wth)h(of)g(dif)n
(ferent)f(applications)h(and)g(services)g(al)o(w)o(ays)h(comes)g(along)
e(with)523 2686 y(a)j(portion)f(of)h(no)o(v)o(el)e(attempts)i(to)g
(compromise)e(corresponding)f(assets.)k(The)f(anomaly)e(detectors)523
2786 y(can)32 b(either)g(ne)o(glect)g(their)g(e)o(xistences)g(or)g(o)o
(v)o(erreact)e(to)j(in)m(v)n(ok)o(e)e(f)o(alse)i(alarms)f(on)g(le)o
(gitimate)523 2885 y(acti)n(vities.)27 b(Especially)-5
b(,)25 b(mobile)h(de)n(vices)g(are)g(highly)g(correlated)f(with)h
(users')h(o)n(wn)f(beha)n(viors)523 2985 y(which)19 b(requires)f(that)i
(the)f(rob)n(ustness)g(of)g(the)h(anomaly)e(detection)g(can)h(bear)g
(the)h(en)m(vironmental)523 3085 y(comple)o(xity)-5 b(.)648
3184 y(In)20 b(this)h(line)f(of)g(research,)f(we)i(concentrate)e(on)g
(the)i(complicate)e(data)h(patterns)g(and)g(also)g(the)523
3284 y(essentials)j(of)e(state-of-art)g(anomaly)g(detection)f
(techniques)h([)2383 3284 y
SDict begin H.S end
 2383 3284 a 0 TeXcolorgray
Ff(1)p 0 TeXcolorgray 2424 3227 a
SDict begin H.R end
 2424 3227 a 2424 3284
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.horn01) cvn H.B /ANN pdfmark end
 2424 3284 a Ff(,)2445 3284 y
SDict begin H.S end
 2445 3284 a 0 TeXcolorgray
Ff(2)p 0 TeXcolorgray 2486 3227 a
SDict begin H.R end
 2486 3227 a 2486 3284
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.kim11) cvn H.B /ANN pdfmark end
 2486 3284 a Ff(],)h(from)f(which)h(we)g(de)n(v)o(elop)e(a)523
3384 y(rob)n(ust)f(adaptation)f(for)h(mobile)g(de)n(vice.)f(One)i
(possible)f(application)f(w)o(ould)h(be)h(the)f(secure)g(pay-)523
3483 y(ment)28 b(transaction)f(monitoring)e(service.)j(It)g(monitors)f
(e)n(v)o(ery)g(payment)f(transaction)h(from)g(the)523
3583 y(mobile)19 b(de)n(vice)h(to)g(pre)n(v)o(ent)e(the)j(une)o
(xpected)c(\002nancial)j(loss.)g(Instead)g(of)g(detecting)f(the)h
(anoma-)523 3682 y(lies)30 b(based)e(on)g(the)h(payment)e(information)g
(only)-5 b(,)27 b(a)i(rob)n(ust)f(detector)g(also)h(relies)g(on)f(the)h
(side)523 3782 y(information,)23 b(such)j(as)h(the)f(calendar)m(,)e
(recent)h(phone)f(calls)j(and)e(also)i(the)f(supervision)e(of)i(user)
523 3882 y(himself.)g(The)h(side)g(information)e(f)o(acilitates)i(the)g
(monitoring)e(routine)h(to)h(achie)n(v)o(e)e(its)j(rob)n(ust-)523
3981 y(ness.)523 4247 y
SDict begin H.S end
 523 4247 a 523 4247 a
SDict begin 14 H.A end
 523 4247
a 523 4247 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 523 4247 a Fb(Refer)n(ences)523 4348 y
SDict begin H.S end
 523
4348 a 523 4348 a
SDict begin 11 H.A end
 523 4348 a 523 4348 a
SDict begin [/View [/XYZ H.V]/Dest (cite.horn01) cvn /DEST pdfmark
end
 523 4348 a 0
TeXcolorgray 90 x Fe(1.)p 0 TeXcolorgray 42 w(A.)15 b(Ben-Hur)m(,)g(D.)
g(Horn,)h(H.T)-6 b(.)14 b(Sie)o(gelmann,)i(and)g(V)-10
b(.)16 b(V)-8 b(apnik.)20 b(A)15 b(support)h(v)o(ector)g(clustering)g
(method.)21 b(In)621 4529 y Fa(P)-6 b(attern)22 b(Reco)o(gnition,)h
(2000.)g(Pr)m(oceedings.)f(15th)h(International)g(Confer)m(ence)h(on)p
Fe(,)e(v)o(olume)h(2,)f(pages)621 4621 y(724\226727)f(v)o(ol.2,)d
(2000.)523 4632 y
SDict begin H.S end
 523 4632 a 523 4632 a
SDict begin 11 H.A end
 523 4632 a 523
4632 a
SDict begin [/View [/XYZ H.V]/Dest (cite.kim11) cvn /DEST pdfmark end
 523 4632 a 0 TeXcolorgray 80 x Fe(2.)p 0 TeXcolorgray
42 w(JooSeuk)26 b(Kim)g(and)g(Clayton)g(D.)f(Scott.)48
b(On)26 b(the)f(rob)o(ustness)i(of)f(k)o(ernel)g(density)g
(m-estimators.)49 b(In)621 4803 y Fa(ICML)p Fe(,)17 b(pages)j
(697\226704,)h(2011.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
