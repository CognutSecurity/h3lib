%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: research_plan_2013nov.dvi
%%CreationDate: Wed Nov 13 01:28:42 2013
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Medi NimbusRomNo9L-Regu NimbusMonL-Regu
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/texbin/dvips -o research_plan_2013nov.ps
%+ research_plan_2013nov.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.11.13:0128
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD8BAD7D2ECC69471E
2E0BFFD4778A2E21C19645790DD11C5A93C1C33BE13B6A35DA4487D9EE9B38A4
1B2049FC64E228D7319ABCDFA4A29B08A08DD8430B4EC67FA6ECA214DAD0BE07
680225415ACA2FC86CFD32CB6210B93F60CB7A2A2959DACA9F8C687C1205E017
F6EA82A4848CCD1E76777B2EF6EC7952AE77117D3E5747718836EA0566266595
AD39130B59BD9BBF3F3814342022B997F022EDD9808B2F5F49CDBF36BDC71F0C
741EFCB8072813793C66CC14721FEBD858665236BE384DA73C9960A9CE8ABE91
E3684307EE1FF44D500F186F57D22DAA956983F58DE59FD2B73B4D2E1A014846
E680CF3A27560D1D9AF2D655DB049BA9E3356197B8071D9AF5108E518517498E
CE0255C8C4126287BD22FEB768221AD5999522E137F808DCFF33D40632058319
3B6201E1F9FA19FF49A5888335A21204FB9C29B6272613C152BBE869D3E55D11
D9759587F283DC60A2707EA2306152788DB113A3E347B57978DBC344FF1C817A
7836AFD8AC4F96F2237620EFA9C42C7BC988A1D30E8B43279E75042A9C413C83
8DBAE11B315A3B6B5FC1351BEB300A84A5FFE1F4E73AB0D97814C976112B9DE6
0C2B9C13E5FF22026C6F2643128B9155F977871CC66743AE79A77B4E9F707C6A
0E129A2ED4DF0D3F43D356D35F9E885757270E9F21A5B23BC009597BDEA4E71E
716433238AC886D639207031A9A1CFA77B04FBE0579546DEB6B1D267007B178D
AB23BAC475BA70CDB2554C11C668C39AD7EF03CF8A2EFF21391DF3CCA7ED2CF5
B5C8B2F47974FBE8689B641519DD9805A5D7D9D85748FD8BDA10E6C2E084485E
E622F8D087C10CA915447802076378323B5DA1178D92CFD7E9CAF75E978BF7F0
B3A639F351534F19665BF09CA6E71DE0E7EF6E4CCC3AFAD9965A928F7C24C0BC
7D55D16AC3D839A055C36BA4FF9E626295539FC859EA7A4A30C8865D1EC80E13
9A017194ED178FADDE49A1157C7D1FE4E809078F78DACE5A54C0701E38514044
7CB399037F850497C7CE4093E2F1A817C5B8946594087D55C2495990EF32C290
CB9B92D2B26060C6893E637E055EFB165093697034EA51AC4452F6F487A43408
BC919F2D6B6BB85AED82C53E115CD32D57D0AC1341F0324E85E9E523E5DD8638
593E67E6FB269FE8A9F72055812F964F31BF4133E260320CB31E9D5A21516A13
619B0096975AA15E27722D7FF1EFFBD47455A66E2DA5DFF28E8B1DF45EA09F2C
D140E6BFD418DBE559490BBCEBA6EF56C66D97CCC38A10E0EB7EF803BC78EBA0
3DCF28A5693D88FAA5F97793A179E82B57DA82F460B73FA9B9A3EF069702BC75
D3223C5743622228EA753DE3442DB12ADD7900805960C636974355F5BA0B8FEC
C922784AAAC3AB4AD95206ECAD22C4FDBDD9B918062794D40EB66C62B4BE8E23
5D1819CC22B64E687E934D74DE1354672123916E7F4D46213FFC9EA229D6E9EC
ECFC4A6441F33A5597D72C82E4BD9A85E2004635A667583741122907F0A3DC00
C10F078073E90FBC96808632F8B46BCDD7C352F3D0516198DF7C495B95A55DF9
CE6BFD3D847DA4F518B81FADA81814332B622EB535CFB15BE7E79E6A34DAC7C3
ED5734080B57E1325B7D946D805BC78580A7EF7997467C254D74D5092242233C
D816DEA7B21CFF20F3379FB731A68582CF3077AF0D059CF55D0E2BE2041FCA3F
00F82CCEC786F7CDA79CCDE6E513E36230A5D0900C406FCC08CCB25B2BADFD36
2AD6205BA75F18B648B9059C14D972A964A68EF9DD679A34FA2F8C7F04743DCE
BAC146F6B31D993A0797DDA3BAA7CB714F9B797B266C77BA3556C07755A6FCCD
5F7FEF48C1DC64057C562C8679BA94973EE4F7F6CB91E156924B18C7E3704CDA
D37E8F945391470E23212D6C769FF65FC381044288B024F03F0631861107DD17
08A8CF19D301A75C95840BAB3FE4377712AEACE305733BF769E78F0D933579B7
0EA73B1B944AF14A3E9CB5165DCCAA2A7C8AD84E4CA1AA70DC55DEAD7D82A249
023AD79A99760C6A595202CAEB5CC774184B0ED52540C79DD8FD984174F92E2D
F48E939736AAA1FB0620CD94F6A13F10168AC33B498F8F495661C0069515C10E
979589DE9A9F739929DDADA413EE35894A6A5B14CBB136548C4EA9C6E13138BC
84B181F1401416C33BD02A15FF37754096C5D97BC3D1F1C93A6E82767543FEF3
277C1DAB9927634E06E3C4596AE9DB308E70E59DE86300C9556031BDF8CDC397
734E25B9DC5ABC0EC7E2C9B1CB573D6A0D02E81F0C54E871F14A55D1C83D5459
422ACFB0ECD631970284321865ABF41AF48F85A61CC75AA91A2C21C30F703418
D5AC59044C67B623E13CC0430DC7028F7CF73048CBF3C2D06CF1E7EB2FD18FD7
572185BFA365AB7A3B74BB41C0C743F96D8225996DA0AEB62BF9F89829664BB5
DE104EB3D74860697B255C72846F1570C7228498283746BDDC39F1AE04521E73
38C1BC90704D50C9A77442950EA53BDD16A69CE127645C814EEB4E78760F8A25
C6090104B0BACBF0BF0390EF3476C8DF63B53A9115C57BF3DC3E608D6A43A163
E36C288D37E6ACF75DD571C58779D87B1E267B1A923C0750D7195150FF1A1EF0
9B6AF2FAD39A7166188DA9D988A1E2BD4855F26E4D02D5A05E924B9C80EA3505
614EC4759D6C74F2243BD039F6393334E46CFB9A9BABAC1210426E5A01F61434
1B09BF43D0BBED3D65CBDE00C71DBA471923E877B29A1378FE2EF31A115123A1
89FF79903EFACCE46C18C22219B6F55709C07CC7D534778F9ADEAAF631A3427F
CC6CF9CE0B88D3DE4A3629079F8B62D4DA0E8B6B8530A3B2233A129E3A3C9539
ED2DA983E9F1AD6FBA73D9B159AC3B5B6C735F469C7A2C609A47A92464C8B07E
4F22034DD63DCACC9C7EF2E78F274FFB4FC622DE99E373093C548C7799BBC5CE
732427D71224003C33AF73CA72C9EB2C7FCAD32B0156098CCDC5BBFB391066E2
30B607373A679D63F7D6862CEB4BA21FA5FF1770C32DEE48F24E8A19DEDB7174
4F3FEC801683F6CB4A89F6C6C4FAADBB3F780A01EF45E7994DF47A15E7E3679F
DAF60C60DC7010E5F02C85EAB85B604D2012AB92D1C4B1C56A6AE895D583A28E
8812FBF7635BF13C22B1D56448D59AE9FA8478B95A4717CBEDBC2697D58D8256
D89E29B834F104CB72B57DAFCED1D207DB7A809EAD7AAFC99AE3D4148B8FAD4D
27665BF4CF6A632004FFF274D3B557696613FE61AC5CFB4BC348F448731214C3
5E6977332CCC6E5B6672AD8CF7D678D9916169B92439E7516A025A271CD7B0B2
563F840CE1E60FF868AB9B4269351D74C98512F69AE231DA91FD6994C825F407
B7953DF5ED821E3429F93D78391A8BB170AD1CDF9978BF0194240BEB2B017C9C
4F9E43D85CD32C949F3D92AECB9F06D2110DDA89A3CAE0A3082B99772D58532E
A69B4AAF1EF7B066D049822B405C667ED8305E2C63E3D83F9119567424B26FBE
1E287E038AC35FB8C52C6F6376AC6E3F7414E4A017F9FAE43F47C36E5544A2AD
784D02E65604DC7FF738CDD6EB1B5BF1F8E8CF81F0D613E6370677F6D29A348B
D94F16AABF817C39974256B71F03B1A9968E53004D5D0561510D62F881B569BE
8AD8FD28A9EF8EEB25F6A230DC6AB0708EA905BB2E643BDD07F61D79F78746C5
238C5504416B1E20DE8A00379FC4B64991B4D1FE7795ADD2B571F119696801A1
8D466E40C5FEFE679B57DC9F4E79BE368D7C045AE139D897156E72985C4E1D7F
22ED57F5CC3AF5BF616EF54A6BFA5B0ABA0F4B966A599138E5897256EF93E528
F49040BEEAFC442EAD92F695BAAD39F36202623EFF3B3877F0C2F8319624D9BD
ABADC859929F60237F1D1FBD0591BB0A7A8C3C30CD9CA26BA670D4EE33B0255E
F4C910A584114488D4C21440F95C3BF71B0CFF52A8EA21A8A35F2F09038CCCEE
B49E75E89A7B0C71C7BC7E4485F0176194FE4EE5EA790B81F89FD6833A8CBF02
4711F802C07685C27C8EB7B90C7883604510856F7EDB14CA998455BDD464D8F9
D3B98562E6EF0FD7499E7965F8491A66E9F32BDD05F2C36A6B74DD8982A489AD
2DAD9DAB3113E2A2F6FD3DF71095451D8A1B860C2691F125FBABCBFEF48F0F37
CC8FFC175CFBED4A31C01450286FC19405DB16C42D1F5F66E7F073AF0CF412FD
30352B46B6FB6D0B977BF34FB3EA2C40AFDE5EF13EF95252B3DACC2D14B70D0A
E365DDE57674C596F08AD7471F3A6AE580F7C454CD775D439D8A0E9ED34837B5
A08E55E6319BE14383542B9F6500CD257A3875079EFB568ABD139F70C1EA8869
611D9D4D50EFF157A6E1D45DF424BE6DCFEBD915BEE2AE4770E6E71911DA542E
1CB8C3EE8569817F00EACC5F0A8442773BD09F1D6E4B8F925E543869180F1374
F8B233ADC8A21133E594461685A92D372D4ED3F9DB786D7E79219ABDBB7EF226
F862C9EC8392AB9CBD174CA5E3C672F10698EFCDEEEDA99C75ACDF7262119E30
EB552070038B6FC5BF776DB24668F0F4594572EAE33CFF74196497041C6BF0D1
5CEBFD453284869BED4F94E75B23ABF7986DB2B81B6BAF0E22877388980DA220
1977AA4C0CAB271CC2ECB9BD45FAA0017AC1381B40071D7F96BD58046D568991
AFC0C3A1C361A6E0B1C7E2FBE859245055586AD4366A7E03B2E105B9B14430A0
7AB625DC612AC5F7E4CD91F3B65E4787A7F1174C043D4333383F5F70BA6263DD
23F651164F2B2119CD99DEFCDB00C284EDBA352C07FB822A2ECF535C30577D45
E61D71EE1ED5A794206E6AD0541AC711EC68BF1535087EAA3272C16341E56ED0
9A2D476738B002F75B68149D8C0386FC64BD8C6BA9CE8BF19625DA910D40BDFB
DCB28A5DCDF97B97AC06086B855939501718FFA726A84D10CF5EE66EC14CFA6C
93ABA36E5DAF1833522F452C7DA7B3CCA399DDE7FB91D0FDC46E71AB81A3D6CC
3E039B628350AE10F18538EDD24251AA028134BB7D7D51D9D5926F75DBEA10FB
DD15A3D975BFDD7E5E2C9C906E5E1094BC3B07BC5E691642079E5C53E7866DF4
C5EC78BCC0D7E70ABD03DF0BDB1ADA299262581FADB69D9213E3C72E1EDF3D5E
33F71893DD997518D00D8EA96754EF5CBE191478F8554CC7245A776AC154766C
A4AE15FD414A76064823F31457241794C7ADF08C5EDE73C5486C3A0006086B85
5939501F9222FC0D3ADB3544C74E73E2FA342FB767E34AF6C7C2E22157FBA251
CA55B73D71DA605AEEC645CD391971BED48115B2297D6C4D4416642F03453D8A
C2A10E3DC2F64454B0C5765D2911517702DE3292A9383F7C813B4E7D2489B795
18FD2FFC9FB867D99585344364A0E79B9556B238A729B6365B4E739129282854
34DAC8587B577D90C2970CE89AFC491906217FFC0CE8C9F3AAE36FE01A3E5E6C
C49C79CA23DC10ED8071EEA46CA5A8720FA4E11B59268068CC9FEE8A25C92018
7D13E660A1ABCBB987BC660D2B6FD7264F7CA0638BC25B83A5B159DAEF5BD762
6E56A969EF2593A8C9D13D6BFDEF95D17AECAE7F4FDAF86EFD93CA0F1CD26CF5
63506ECFE2F3C8B4E4C6A32BABC7BB54CDEFB36FAF6D3088D3517A96309E02D0
DC2E9F20CA0C6E1D1FFE305392AEDFF2E5E7763EE32B96226A43AAD83ABFDBEE
815D40E28CA549791405A29DE98E2B1DD10F21A081C6CA839CD10E7AECB206CB
185EBF927FC3EDE8FC496B43E2DDB4B20B960FF13B493794BF12502E0400B708
74C176ADB4F4A49D033F737FE2536E369D0F7DBDE3F534AB5466C2F3DE9078DA
819E0EB14ED925CCDEFE82E17877E76EBFC67450F741623F6450B7E3D8BB7E8B
D16711DD5F1DE319CE61EA79BDBF97CC0E57E8F40B0DD5CC212E4AC53B03AC40
89A8EED2275B2FE637DD78674D018AB0F96BCEABBEA1B6C7E269444CD6F87E1B
D11916C1A14C11DD2ACB16EBD36BA443C77A12B96207BBADEE20212E86124CA3
E39B77AFCE54F6989A74C564DF18BD96E6E563CCC81AA38E83AAC61442844E97
33E8D210D1263812EECD3D7A66BC3442A4BB45A8EF6EE379F3A0083EB2B6844C
3D982C12D25B230D4D2866176EE62112BB8C77B745BA907DD5A6991AE319D33A
4379586D4097FCAED8EC415CCDBDA9801E168543480A39A5063AE31266DF857E
72310C0D916C002B02D9B025971A01FAB3FFB24E6AE36B4BF290D32E15FFBBD1
CFA91D0E22F6B83B48FA3F01CB5E8ACD0C23317F88FB64830E6074374D310422
F59F50625FAE6D89CB80971BE6095515C23C4A17B4F8D49685B7375BF3B61F72
7529590E1211FD1AAA95BBB70C03D0F641ADAB859A995E8BC50CDE73950A2DBF
81773E6022E59E759348C5376CEDAC264722CCE5BE60B3AEF9BC65CFCCB5DA99
59CC5CDE05CA9B11AB28F688D68EE5A57DCEB103BF60465832B7ABE1136C4AEB
539B21542541A9FFE6D42B465D10369B5D9B76B04DE0542EE1D0159E16D9EA32
22B7F92EC596128276C7466695B9A7037C4C166112C01EA9070D3F475D5172EA
AEEF2DCABE09333D4584407822EC35B5D1323EDCFD5500AABCC3419BE04E8B1A
91C58C3532A186064779180C39A3E2F34EC0DA1DA57E5634A439763C746E1814
DAF0750B1CDA8B30158C50457F7C5AC42934829D69B8015757C4F22325E7DF77
8A71B94B57A71E9D090630288BA4A0EAF113D7DB469931520720B053B732ED86
ABEB6336F8FA10168E824ADDF152424011A4D81E2F1A5059A0AD68644209F096
34C6B0CFA6B6F932BD9577DC4E9F647DE5E1DA366BBAC79F8AA538E513B26906
E9E6BC229D511F324E32956174BE43976DE47CA32C8DA3FBA7A2ED4CB6FA883A
C78B47D53692A2C605FE1895D30CD00D1D9EDD9EC1FB4AA5AF31A19CDF034B7B
9B66DEE8C734C7BCC1532ED1265831A33B806D7FEDDC4387DD42C3094CA48B62
8CD6E404635C910E004F96C1270C6C55BDBF97CA0113C8FF289E9216C2E6FB47
5172ED3964FB217610B460E950123D213E50E32F1CF03F4E4183592FA7C6F19C
419BFBADDC574047DB800B53B229A79EEF73565F3D0D2D1E4749055FBDFCD4A1
FEF82C14BD6D88C78926EB38EEF466E759113DD86DAD66D3EC9333D1DE463C7A
B1524D0E932C179BF2E4AC27FA5915ED9BD8A2B3234E5955DC2BE49A8033EDBF
0686E3FD7F76A5FE828FFEB9BC023A911609B8ECC2C297AE48B646BF30B6C88A
788D4A72F71275F774BA372D225AEC738372550B7D53A32491F1A8665B474073
5704655A255D0A65C53DB9BD53A8FD55B1AD8C1210D9571AF92868EA2A7D44A1
AA9B5F0B1D457F27C6AC66C0B0499A8DAEAA879FF07E6137447A43961425A180
51A0C0C1101E1B15906BD42626C327C4040E3EA1DCF804353D5965FF1948CF4E
8CBD1B1EF055DB237AF1BDE8860D234731B9071277811CDC8FFB4BADDEFB5308
323D86B658D42FE47F91FBB7C083720C78E7B5AB5DE5FB8FD0BE47D438B70075
FE95759F01F5071960AA6C3B6F5E02523C7F0420BCBF01E8FC80A20FA98F4611
FCA07C606C2B1CD8FAC61E79642B0C9621E4A361D1DAD09FDD6D42CE8CD3C254
E235B248248E92EA74758A0AB0E92DF31C2DEF150B44E376ABAFF01B014CD6DF
96596BC91B8C1F96B3187B87B37499D65461B684A0B2920558B362D9AF2B90DC
7A431A6B6D4864907045D879441D9875CFBD77CBE0A95792B64D7AD40D9C21BC
719C0DCE890BC07F98362A6A7CD4F2C4A6C0431655229858A94DE1E5560D9AA3
C0E628E83885466AABB86698462048B7A995B9A696A4DD30E4CE72E036447B35
5FAE151AEE60CDADE0E99C29E7C665CE9170737A05C883C97C75E7463EC2292D
3ABB1B3FF47E0183D1E44DC7BCC0CBB56495E22192D061B5C1758C36D86237FA
061DE8052A0045E1B193E4471D086EC3687BC3864961669C3B1CC027A7F946F4
B419E3C27DF1771C62E0D8095A1A876A0041C029C31F9E8C66735C59EA38E3BC
ACCC6F85A6E4576E41D02E4501CEE9D1574453129A81FC787E6693C31F28D8F6
662AB55A70BE52B97BB65618953C4C2F40516AEC9606FFCEA611AE4928A29240
F876DCC6E01F7FAC1EA513F2EFD3FCFB9BDF171049F1D37279A6B102FA139CEA
7A72239A347072565F0663DC0EB207D088EE8EED301E1750C8C86BC7604D8438
2347522297D1EF900E89C671ABB7B721D7440302D3F50A273DF58E4C5280F43E
7826069F508F6BD473E34EF1163DD8A2847AE7F1D933C9D57400E364E7E6A79B
DBC9F84D85C1C05CC98FA817B5B18F1232DCE1C24304A627226FE0D10D24610E
B9196C238B5562F11D8C61985595EE6BBD087AC2A1A006C0D0F4E60004C9D990
58DB964659C67FFDD1DEDA20232A5E47F45484E5C72E4FC03864B539A2F0947E
EFF4BA2A284D3FCF219044266B28AB3A4DEB5E1DFED65E514865224354B20D17
CC42C842AE26219C41C7F303EF9E789001F192AF877E21C32B7039E11C6B7298
B9460C2609CB7420873B857DF4EFF9DA9D4652CE666141182F863631041659CF
6211D6F89B3F9D78E0A2FD3FA71C28EDFC157F6A068138EB66FB67C22587FC14
898051C4FDE207F01864E08C51C48C374BA974F603DF4E0C8BE81C50F1CF9F6C
14A15A90500C579A5F61209D9A1F503788BABB313BF95F392102C671FE3892C7
AFAA4221539F3C13CB018727B23AD161C03E8F8192F4605E1B060F6543359812
107C472D0DC9065A549730A059B4021CE25A2EE7EA03B5F1FDA6B4C111BD7B2A
4307A0C3F611DF40E7AABF085B0FA34A65A77EEF5191B9AC2F2B15E606062CB8
76E36EAFB8469CF5A2EA800482A58A7905C27102F478B38C8121234189544A9D
D2F7FB7739F9FA6F27F76366D65892E4657F3885E9F5719403C66C213DE093B6
5456A379B068DE79564EE2EEA0F092F62B9F6ADB864845A1B0981AFE60C32AE4
83FA52FDA16B1570C002555A23650AEA303ACE98707F0C03576DF2D32C346D6A
51ECED2875F7F94A744C67F28851F1E2D512647277B9CE8FB16D00896BB88B0A
87F5D4BDE35B9A8D44314BDB7849D0925D546C0A7B151844206B65780C56418B
79CD715603DE5C207FC70D3705AA0AC1185A71C555012DD01A91B722FAA706F7
F2104C3BB2476C28FC1B1B3E5FEF3A3B94CD552E29288AB0A01E5CD08A9ED3E4
2F346F6CD76FEB460B4D6C03B7C24A47A5B656689AFDD90C8CEF6056EC65CE4A
345F755D51353BA9EA39DF033F8FA90DBA3D311263300AB0844D276EA4754D04
BE163B9E964F6762BDF2BD0ACE10B99E1CC92EDF4B5AB8E1B0DC311FD77D5221
0EB2073CEB06E68D96C83F76ECD2882B91FCF7E694BBEA02488CBF10A5745E7F
F776F1EE9F81371ACB9AF0819EEEEFF1853D62F4B6E16BEAB2EF6A77F16BBB6E
90FDD676A2215FF11B3E601743E2EC204EA0883B4272A2E6FFFE12A187496979
DE4AF5042931AB82AEDD0BDAA9390BCD3340C19A0DB091866A8BBB9FC2D388BF
B0080737096CEC9BD4E69392546A9760E5EC1AB99E8E269CC18A00AB41F83DE2
1C10C8844144164727F02A01A5AE4647CFF15B4DB3DD55D05668D7770ADC6DFF
FD4AD1B415492A7BA00FB5086F6FDBDED47B46B7708F855DADBCA0102860D9A9
EF2A95B7D977B03147AEF2B3AD78EA8F798A626542C25D0D6F49D45D55FEDE7C
D0EFDE808AC369ED171155440640BA630A035B4325E0DE3054D8708B4303C9F7
CCF0EA81487134B66142076C7633EF1DA737CF3547F0C5BE13543189520D1DE9
F50B353C7EBD76815B0E7D79F8D9A7AAD946055548AFBF698279928D4D84C98B
3D33830CAD9E14CF669C7B38CB2D16EE53FCC59444A3FDDB868D3E37CC6630F7
96F8CE5ACC4F49566EDF37EE3889DC5E2222EFCF4530BFC8481C361522D9BEC6
A0A706A2E6C151E1B64DF5D843B0514647A70CB32D9A9EA279638A6BCBBB0C3F
C8C66A1DE3D96F5C361ADF4BFC4169E554581960E5FB11FDD2174E1F9269DF8A
84A1E7B30B6E690B489CB78AE75236970181644F995A049EEEB890471FD35039
CE4A1534233A0FBEC8AE57A7597F604B5C34E2356BCFFAFC0F71433B47B55359
AD40D487FEED35571D63F8DE9A74CA226BAD0E6EC5046011239ED7D6C4781A98
3130F2B1FA44654CD5B91CF42DA4C695E910BDCE9932E059471DF1BFEADBC517
962A728E8C81AF5AA20912DCE8489435A1D116CEC6657727EEA5AEE64DC20E69
A8EC5CA263785C42D2C746A981E26E7728541BC2259A260D72F1D56FD132FC93
54FBD4D9F6A9BDA1126794B5EAEB79FE0C572210398DCE3A7B37E48BB6DCD262
C4CA3DA7196FFAFD45FBA0351FE639313CD6DDE668F895B5020F4CB00360A74E
3B5BA087991B2B4E835F0C5F79368E4446B2CEBE6D979445C4FC004B711A6015
65D50F42F12504806E5869CC06611040F4436E10F1C49F8C9068083EDE5A2BE4
D5E13E206602D6EE172BB41B870AE6BC9EBC1087EE59CB04FD22EA279BFA985C
84CE1C99931D58AB61669EC997E3807030CE7580AF7FF33AA8585F9EF8D12FFF
1187C0A666DF06C87BDA173E671853C6C07F8F633EFD9B3D6B19A9B435B32EB4
337DCBAC1DECE00054A48BCD26E745F99871F9B9F997093F5ED44FF216536272
007F9B3F4E55998454A54409CE3BF01B6DE935D2E8687D015806B73D6BD6271F
F82748508EBD68C0DAEAB7B213EFE0B011A374684D037A928DF015CB68AB5ECB
045C5F318DA69B4E75480900327B701EC1C6662B73FE7A7FA277E156E9E2FAB1
F5558F87A882F1ACB37DADE34CF759A4BF8DBFB5B372AB10FC0561811F8BB0A6
34F3FF7824578B346ACE18D2ED3BDD68644148F19051D80EDEF9D525DE96A8A5
AAF64E3F732349662B4F711DD648E39AB431C60ECADF276187ED0F74F86AD1E5
960B5E98AEF7D24481AAF41B357D90E35926CBE615054E33CAD6E93F89076148
5A1B2F16C8124E0FE70275C7770ABE872B45A898AFC7E9AE1182F5C12308CCFF
60747EEABDE6AEAFAB56BD4DC6DB405BA016255E9B5390683A614150A1DE5A23
89B641AFB7E46FC041E9F1B78BF70214CCFBACB164337FD1ED81DC15351A5E48
1781127EBE547F10F4F1FDE9AE8A4FFFB8B43BEBE4420E335970FD7E6ADBA703
ADB40240A344C911FF16C9214C48BB7FF8A66C80B2CF0B2B6BBA836EF73BDFB4
717028D90454864D55802FBA506F5F270F75BDAF9C28BA2A00163D362D0F48E9
879BCF6C7B05850AC9FDAB1F8B5F9FE4AF8EBF8C3E1167EE8DAB88B63DA94304
3C4CD9C6C1CC76636BDF4B52B95A65832D685E0130C942A42D896A781AAD8FE4
9D93406C7197636F715DD2263EA9C932620B05B422386C6CE01A4F5E56B96A67
54C124870A9E681DA4977B2950D64357B58B8F81840CF4031566D80E07F7EB12
7D3A5D6B7C9EBF096ACFC1417F5A774BB23D17E01AA3F41A52AD8A869ABBB56A
1C3CE683E0B5FEBCB2F116D74B0376A5CE3E622D2FCFF856FA5F4239E26C8995
161D86ECABFED5DF18CD8603A29B59D7E27CCC8D3AA11B80AFEC7E1F1EA3C113
56C983CAC58F6CD5B96B254855FFE24A5315CBD39D1B8B42C4281D643768D4F7
E124EC0DD397DCBFA86930E7FE482156E33FB81667AA44E0530A13A384E49616
7E144CBEE5CC6C7285C545CF768BAB03DC708692535C2476A7A278796FA3434A
8955ADE66D0D43EC1EC1DAA4E0545AB32AB702617FF03DE94056509599422000
C317C146AEA819C55CFA01967DB04EDDA5E988D09773A431CEE4D3D86A58AA95
CAD1992D39CCF95962E6B9BB14C1EE85622986AA05924BB7ECB8A3FBDD742CA6
AAD4251B11B9A742AC19565800D1210A0C2D881298D0A8E456615C61D3C31DA0
4B412F8088D521D3925C3A22861B6588B2A47B78A60841575DD496AC6209BFD5
26CDF71FF4C45BA14D094423BEF55923695DB37FB3919B7B5EE9B80D37D07CC6
827379EF847CF83BD7B00FD44F0C3F1F998C71A6DEB440C000F79EA09F8CEDBC
15F5FFCCB9874DA0EC547F026AA721DCCCC2A72D229B0A573003F89B54968BC2
53A22051954FACE693D74660C65CF53B7A827638EB5DECFBA6BD54A363B92178
C2CA1A1C97A1FAFF99120190FF2E3A76997EFF71C0B00B95B55E3E0446D03DF5
AAB625E5669027D2EEE393493AF6E3A05F05F21E123C40C422E04FB6751482F3
0BE3183755F45B135CF31A0795EBAA968FD2BCD06FEFD9301FBBC796122434C7
F07CA834EDF77F17FDA2C4120096F0216A62362B38B4994C7B49FFDF153959B1
219A92646C23B1FCE8CF081575002F343E80E57B48C1FF5320D6B23E03932530
CD1194D92B31A32293CADE1F92960B21ED3DFCC17C44CD0DC56578EF0F1B85C6
9301C2EF92EA032768066CDCF64E1110F879222593E098A864E93AC0729624F7
CE2F3D5A07EF8D6737E4A59BA81B9D00B824A16D67D19A330291CCEF786E74D6
DAA31812BCD45E199A308590B6E378502C44DC36C236272F44617486D24C56F6
448541DE18A8D869BACD7B9FD8D36A3A5023D26D9A6221C87EF83F705071F718
5A8AC1E358B76E87E3DD964CC948A91BD18E05965E684818256110663A98F60F
5A7FCFF48E9D0FE883CF55CBB4A8F0CAD57B2CF7CE4292B6F4B8F5C2857D7F84
C5AF052289B332FD056EEFC6EC5E4E573842A023A94C92D5D00ADCEE28C7FB58
F3370231D9EF10CE8B532578AB4A6285E4EE9F231E6BD4693AC6AD3013D1784C
63EE4E9A42EC7F85172F7751758C1AC84B6A092617C9134624139B9F04AAC834
4778FB9CC923830F684B63C452BF4B9ABE3D0931B893A37A6CE76A5775C6AD3F
36EDC2A36C44D79373DF059BF2730877AD2D714C90B76219991D21BA09DBD1C9
342DC6A54CC17D8258AF62B852CE6AC96EA8B8F286BD99515A6C7F75315A46EF
F1E44EB29FD067D1016CBE04FE753A3A86B6C34E78A194CBB48F857373F65796
357AFB445198945AB909C398996F53027357A5334C5AE5AE4237BB1CC44D0878
991717B43987961763383C313624C6E9306DDD77974B9ACA937625AA6F916FEB
F47D5E4EACC4779D733F531FF66192BBF7C80B2CD1FD10D18B7B7D66389BB655
2F3B1B3AEBCF0CB8CB8E904E7535D4F98168DF05003080589F8A4D9EC032E46E
9A1CD11552872A8BE06358E0BBD55349F808CE9F5A074C0EF2A61A828B32E902
48D8037C66DC3D141DE14B1B19DFECB92B477F01C695B907BD1BDC842362B16B
C139E5D1167E82FB720B4CC6B705AFD5E97F5BC6B2BF0F2396EA8AFE0D3D2EB8
01B28B1065AFFD683E34E072021E80771AB7C6093934A67CADF763F4DF93E1B1
CFB090AAFF464F3EC6DAC78AD915932BF8A4AD3BF17940CDD0EB148655FB9C22
10C4A24176A92B633151A899ED3A8E07B9DA7131C29BD4A0808305E2BA810414
F027BEDCFB9B64276F8A24231AE03CBEF9A4AA76969F39190FDD5121260E0A4B
16553994E5F8A7D56629EAD7E3A79E9C1B536C57454CE1AA4A756E4F5389129C
3D22C5564DBFB97652DFB3B90C07C9F6F7A8D6329E335D9F619864EFC5EA5DDA
C81A713A9179E976C3EDABA24D416C6BBBA381C0846E3AD73CF1C2BC6E4FC03B
96AFA5EE05AED427538E8763C0E36A9EA7BB232D5C868AC756E5BB0F902DDC3B
CB87BC001F6AA85CFA0D94B1BB8FA9D0C5040FBA207694E20DF05D29913077B8
82507A064152E65A4C56BC7759AA78879085CAD6C19EFB61A0DCB8C0F89DF7D7
E8EFB7AE53275BA6FBC3E98B58846A6BC6F54E8256F7F4763B155156FEC12A3F
87B40AB25E8B417792405D56EBA5E4A91EA7347714CAB26A00C33447F7AD9BC0
D3638CA07F4C5B04831DAB753D498EB30FBE4BD9778DDB1676C308EA760EF211
37007D5526AA89C23D1CC052C636987F2ED819717DB22251C281E316045F874F
8BAD3B3D53CE07DD10C3F379CA4F3CDD7CB1D87A8157DEDD86F539C431ABD879
034FF8739A38369E8477833AADCB635068816C56B9BEB96456C062A776E39570
D7461F70742DCE81C22FE1E8F0144F8F6EE40B28759CDF2C092A112D617FADB7
92BAF96A5AFD836BA8794E5518E0B29B189420C5CAA03F73CE8D7658F3F6FB28
01AF4609BF92C4713DE384D4BF2ADC3522E01D3D930DD83E15393CE4CBDB9BDC
A000DA79DA924E3FE330202D64F17F0C86DA74F31E5FA66FC1400EC984571A31
3E66497F5A4CA8026B61E3ED33FFDA135FEC39D28E314A62CD9B8A906B3695EB
13BC5C19A6E94FFB8E187187EB7FB4AAAE568EC6CDFBBB834043C60EF743E1B1
FE7621DE83438933A8EBB73150F3E96C9BB0486A8F94FD7120A546021825FFC2
C325CCA3150B33A1197543A46393D4FAFEEE7B1A538A48D2FF14BC93A5323D08
B8C5AEE20AA6F39B9AD4759BD36FC9ADB67599396DB70424C6EB28F18C0B215F
30F8A8E10B3C6404AB848245480AE682626782E6B58BC879DC734D2A7D630640
10CD4E52896E0A719D190030B4AC196D64997D136FD5259502F98B53DFFA8654
90E789DAC8C53CE953CBCDC59B8B2DC053ED6527F6582F72FEBB1549C83B627B
4CC1E0E2D08DB8417206BDC48575C5A42BCD2545562274B7116C3845EEA1FCF7
C059562840215445139430EE359E93672BE91B00BFBF0EDD9A988DC416DAE8D2
B24216EBEF0990046A9AA44CB11B721E7A64B64A3511F9E2617778540A62224F
9C6C2FD7A0758B26EBF3ED74C1B2E6D8B7ADB27E0831ABDA0ACD1E3305B140F2
681B61C93C9457768FA7A3A41822294861B3EFC9FA1A602CAFBA3608143C5F6F
AD3E4A3F1023135232F61D87FE6C176418C197154B8963A4E624978AA90E13FF
F3FA7B81F1586647223AD314EA761E9353B5E7CE9EDB0643806C56D02F4853AC
99F84E58A6014AB75856DCF2C54229C8CF662BE9CE4D13FEA86B488A35A13E89
D5D24607C971C18EA75F62853C5A1133376763BC07196CA88A9F97521407F503
11DD5A75D984FC5B6285F1D4EC7D1D05A2FFCF3019D24AF650F62DF86BE1DC6F
858025EA873936EB6929E27F715B2FA2736E6315EF7535ACF44C25268AED16D9
1A9458E825B2BD39DBE8492D7C46C3FC59BDAD8E948C99D954DCA65077C3659E
3015B7ECFE81AC7DBE849E9699932A7B36A14AE5039C4BAAA3604514DF076C6F
364EFF10A837ECBB7D84E7F4A12A6D533D8E6968AE7F316592E7DE13E53FEED9
26F7FF419B125568DC47E3F3A60C7A89134697E5CDEBC746187EC26617D5DD62
238B3416C934512E15D72BA9E7C72EF4E79DFFD26CDE5C97A0187CC845EF25EE
A996571AA77B77575C833AEA1D4289111DDA0279A57B0D6CF1B8E290F84AE0B1
2E1123124A8A124616818057247C6D6D118C53B8834047621167DCAC6673CE96
5F9F24ACB56513C65D078E286F13423E4AAE7565660E689572D4E30E53B12F88
E26EC0B325EB7367766EA5D2DEBB88B4A36C350E0AA674772DB09937D77E065E
8104DE745D9BCA1D7A61B602C8021EE38876D1704EC104D6E6B439EB1944E930
A8EF4C9B8FBB61DA004A6F2533BF4368E12CED705AE7B6D781B770B93A232FE8
F8685E466C1A58EF4B2E118411780858E95986438979F472A651E3C1FE180ABD
B01F8E3B5DF70118B704B2DB2B54BA0605EAF9D377BA9542AB815B797779716B
CBC7D11A7E83556EACC976ED62F9834F37A8186A37E057438DEB07F64FBD87B6
0133AD08ECE643C8FE3B5B8B43E0C5FEF78DFF4E78FD8258ACFE9B669AD97F08
8DB735FE7945864F441D29E0472C320B08FCEA77F7130E8E70653227568AB38E
FCA3BD636E36244017F5CEE271CAE03F4D68B3AA8A3B031391A7C959BAAA5837
19DC9A1E4A8C7BD6884F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAC472B1D98FBD0E2E060DBF2CA9A25A5
B11F5A21C9DDD3781A586EEAF451935FDDDC897D2B235FC33C523F93DA3B5684
49DAB2B2402C3A49097E7598116A4D36295BE3F0F241BFDF8A78969FF3C005B6
DC5A54916ED69D1B7FB6EFB7DD6B6C1E79369FAE64074784CD74B34B93D42B17
F6059A1AFC17A51EA38AF85539833E865A51A7FB5A5279043E68FFB9229EC6DE
4ED5A8DA7D9F76AE8021045DC09C95C9AE4B4EF735A5414D985EAD8846A82AF9
1F44923F25BAC6773C8AD0A810792531D6C664F8CC76003C390E4C666D8156FA
A3FD5B5A21FB57B445CC3B9E9DB8993E4F73FF91CFE037D18E559DAB50A977CF
474EE1410D7097785D120CACB576738EB12DA190F7B750529BEE076434721451
DBA912E47FC61D09F44A31F7D88B072B10C44A60DFBC669093304B6A9793AB48
4BA68656FD37163201BA034610F9A7BBE4D94389941682F0CABD073F2376E62C
44DC287DAE5C2DBBCA73CAF31025A3FD47B8B3105C7B8DAF584E040F89694E7E
7977975282962120B9FC4056A749DDC15C7A56AC870774C97200F0601ACCC391
9419478EB7CBFE4FA27538E2780FE896E01C6B488FD152C0CFD0662D318787C1
08CF6922C96AD6D987BFCF71D9D041AFE0416F4F1A755E97F12D7026336D199E
9CA3CF34E140D7DBDF0CD2C2808BF33DBF18E81C46D517324A5E6FF1135DDEA7
7C3A81634324BF12787974F7593F2CC8CF006AEF8B1106D9E42E1BD075949F47
EF868AC4807F7AF1D8580FA64B5350CBE26C0401E33DFD17F6080B00A9B3BB54
8FD2D8337553BF31AA5F2A0A5156B81553747E436F523BE782F9D7CF003C7D49
723CB3509F29909A009B6625CD539E909156A47A1D4F89C3686AA1450F23A5EB
F94C4754EF165A16F356294AFFB344911D7ECD11AA4FF54DEF7C1093ECDC200E
0C407318D16C37BE276A19C497B4C0403D49DBB6803FD753A9E426992ED6BC8B
EFEEAD4D7F0AFC75BAB14B817CE2AD91E5FB8C735C681B61295068FDAD7F8655
6D7A49C65A2B28B030CCEB0EFB92CBC6C3ABEE1E14C643529096A2EFD737A46F
DF835FB00224251203763DC185708039F299BE6BABA56EB677FEE7BFE1DCD5BA
2764536718B57418C07E23BB2D72A807F216E2009FFE57F6CB0CB72BC26EF0EC
DD2C0BA97451C9296C2100009D54C0722BEC75EC3DD97D3D9C53571086A1EF88
110925908148F724A5D21C53DBF2EECA199594CF093FB8D49DAB28DA0EDB9463
FD1A066CBCBA4B3FCF3BC8D6A3496230AAF1232518D579ACDF043A43A294F4A7
F0FAC599672AC5FD5FB3C7F90A908D3DEB35D08E2EAF4EDE0C0C64A45E3F43EF
0E613C40802E0D32EF0DF8FE6F2D4E2880EB4A142B1051D652C1E371D57B511B
52A4DB8F69D76C3BBB44713AF222687DB9CF10CD88109B0AA050F06A64F757B5
69AED696735480B8BA5F68FED42DD602A9644C8587C6BC5C9FE406C4A4206DF7
652D22B20BC90EFF9E94E483473A359ABF0C020AA89F9E74BA70701B18D94002
8C70E43447EFC2E50AD5550235270EA6787A4E15BF4FE23DFDA51D40DD9BF5DD
D3CB175F3E1E612D87391E09FE53FAA4CD9E8C779273D47755CAB6FFF172646D
F47F999BF6FF6FAD1450F5FB9B42ACAD3609A54B8B49C81270862B8528051C67
824D505EBA49C21B1C0C5AD05C2736E54B1C37962B6AFC229BC6F0A0527C100D
EB0C7D98EB67CE9C25F62632EB30BDE3A806E10F28A51822A85F52582848C432
4241222673009938835AFBCFD91900B19867E85B3CC3AE38C42A90CFEC73FC18
1CA0042E22BFC1725BA2C696CD7D58DF4F8A5F6C606372AB44A10872CBD16F81
22A624D8D71C946740BE4BF01A7ACD72330ABC9E413D1DC2AC8DB5FB78D744C9
ABFCD095A12C405F561BD9FBC456D92083B879671A87722307DD8BE84F65F443
B78CC756130F09B9C2B636562C5C7CBD2D34994227FD7BC1FC0E142A7644F56B
21B1EFDAA5BD4F7059552906D8A023148C895EC6A8FD669D6702EA42A1BCDA40
7B3C74C6BAA665D56A05FE6A270625DF8ABA0420067817990FE7EEAC4CAD991C
4DA475602C98D1064DBF03040A309616B0A7A154D9577EB6EDFB9F157911E60B
FC3B69093EED07FE5C491EDD336CEFF891C44368CC68BC012B0B3BE7FD642FBE
01853F7F1EA8A129600ABE4143FBB248AA643C5F573A81891AE27C8741D9A25D
065223F04A29C28C1C21FCF83DE4DC83E854B7E802445AA7F3728514E3F485DE
7B0FD1C34723FC8529F41BDE487280787CD363A398058AA4BB535EC8F15819A5
DBBFA283F990B6A68856A2E0FEAD3FFA383343DEDA2CFC1099B1C9BBBE34F5CD
3769804A9E356170742E3089C4F6137B402CCDF06E6CEC73153C415D4511CCE4
0B458764CCB7B3D5D909920DCCA2203E28B5F312C10B94877315E717F27E8B8E
1337629DFF4C9F257DD2790DCDC92899C0127F200B8CF2CA3C067A34CF65BDF2
76D5D7DE707A867827389AD410CB0816BF3ED4CEBF13762C6027769C216D3525
5C7FAA8EBBFE0DBD7AAFCF78B5AD07D26F98F716E605799F3800C68000941A52
D691640320D5E607ADCF51A5008A5CA9091105129F16BD5B2B6F2DE610C064F9
5504C55B0B33BA921D3E00537475478BE62E4A4C69618FE8EE03001B4A00839D
B50762309EAFD25B0D6175D567B8BE86A1AC1F7D05D239E99CBBA7E661295C05
43E196D6D9D86C8123494D46EC27566B91425A2A65C07D4FBCBB8FB94BE05DFF
2B3679CEB0DA2442304FF353060D4326034A5CD9EC8F7E868A429DACE417CECE
A2D839810D562BC8ABC3021CB68A52C9349C362FD595A48C117213B7502DAE7A
2074D4FEEB470DCB239EF9D2771EDD2A4BDD22F82EC7F10C1EA26A509F71696E
FD6AA65FE8DDCF689666504EB979E085F5FD245FEBFEDC9BB1134443FFF918C8
051FDDF6B44A2552C20E9C17F1F3478D685F972CD43E70F82264386ED3307C69
F7B4EB8C14B2A4EE6C78DFFB590080B9F865D19D39B03D577C85C3A6B25CB5DE
5208EF1DC1009C1E9D28B71A246B043CE44E65FBE48F3111EDBB246DF8911317
DE4C75D695826A46540B4F8DBA708AAA2C2D73ED562231D19C05287689EFB3D7
E0CA1DC96A72C881E694C4C5F6A2E9ACDE3B385AF7BC00D85F75BF5F32B350E2
CF46BA0E8D0120B525AA93F5437EBEA5A06488A7CB7074776AC36B43F56134D1
CBC7E2DD3206F64E3C0126EDDF99BD21DA81D18462871D643CD3657ECB167D54
81A1CAA6AB6A6C2F54D5CA04E5DBC61BA2554903ECF016CC5156243D4D4E7820
A54113A00F62F7A573CF78D843AE867EC303291964FC2C617FA9904E579D5BD7
457627A928B16B0451AF70E5CFB610D6B8C46DE288DBA107D65FCF751C871D3C
44DCCB5D983F3D3D2382F0CA5A78DC38B8B50077EC2704FBE937C9C79BE3BA37
02158614BFFAEA6375F931CE36B485AC96E6AC2C14E3B76D063D1F74FBB14F63
C372B23671E722DEDBB8F41E2BA0D1C22E0803B86D6FA41044F55D00476FC578
C7A03E2883CC7597D0AFE18E910E32A1A25D30195E6D7DF1F3E66ECDC4117D1E
2A70E02B82B2D2FE731E814554A6595780DBAC7AC03CDA298908B188DEBF8F10
D832F2BD3C5BDEB65D65D942ED54E36A6FB9B9CBAA3972BCABAB06157DBFB18A
3A746FA3102EAD356A46B85F69C1005B864AD5B72792345F2E76FEE2C97792E0
34947BFAA3AFBDE85B8AC836A29CB410107BBCBE4BDFDCDDDAEF9C4AA25B8C4D
BA5674894DBA541FA54BBFEF8969C2B3D9201BD72C3795F639C6D7BD54D84907
8D871250646C13B71CCF91863212CE0CE1FF803FBD3569D763CA3CAE7B8F4B2D
C1633CD77269685B58774F0C9556EF708F3A11FC2712B27C3157314BB5A8D210
044D0C3CA09B482AB45A87B7902B28E5BF820716D1B70F8A5B2225DF05E7298A
DF77894331ED25BF6955E13DA0B4DBA8FF78BFDFAE49D3FE7B47F0B4C5BE3629
7E9DA5DB687C3BF75C879222847F855960CC952649426FBD46FBB7D1BC219B59
B3BB99066BCDDBD6A90DADFDC11833C9315CBE03EFA1554980E13B37FEC33DF3
B23FC7BFEDA3E15F00E029042A6C6A5258CA8ED3E730F889E0E6A6BF81797373
EF64D457FFCBE41CAE0129E9F3CB9D1D32F1075F66E313967A0B57292667588D
0A60A045AE5775EFA1273AB6EBD83470905482FE174288EC9F9541B8757874D3
6F6F488FEBE93512B86F0547BC109D0FCA1B61F7B9A747A929E0834456AA8345
D67BED05C6E0D346853DA730D5957AD4B2FBF564E2645525DC115F1EE96A8C4E
A4856635CFCF186DB9CA2E4FD8A303BA61AD0D9AC7744DAF6186E21A9B0DB6A4
9785EC5565D2B1C4B7C7D7907AFBC3EA8075D441B1CB48876736D363225511FE
BE1F165411F088AF295C5ADD22C031A217146DC82CF1FBBF8BBC351A0BAF4CB6
2F893E21D5391AA9F78F043BAB8065FEE8E62DC916E4C729AC372293318A3883
D412344DF41A0212EE104C4F24B1CDD002B2E8741BF0170925B3517D9D6017BE
095C3250ACCD5CADE65F11AD7168DC58FBFD511759223ED7808C986098F7DE68
AF7FEC93113DD167A1E718C87E3CA36373AB7574F3BA20521165894BB51606D4
8D429306F3767F7587727B64D2D567A978761B15AE386456AD8C5D6D08C394B4
FD31454C19261B8AAB9D753A323458808BAD0F492545616CB6A63CBA788D18B0
676A0F06BE921D90480A1EE27B08B962DA92328296F87E7C9301F0A3E036FAE8
035084D12CE80FCC766F71F872C525B19AA0133905BC05F7CBBF38C5C5BC9300
74813A6BAA4F7CF2CC57A84CFBA77156ECFCF0BF8387E2791C791A0005560EE2
6C52E95B71C4B9F6D3BE66B39D0DC2611FCF84832EC7E798349DA14A17A7FAF6
0A12D3A1E0810B01C554FDBB8EF9804F5C2EAE78A2DCD18F252A4A13C1842F8B
EB5A2416107B1E59084B5892D16B0B0340A268B0DDB25BD184FD79C57C9EA994
E8F2481718D13CF485B3CAE0E01B327EE29107319D27F247A93B9F18F4022B52
93001DE70E6840F613E8C5CD09CB9EBCCE3FD4E9C75A824F521C69F2786AD0B6
8F19B6B7079CF0788A7243C3044621CB3E65487B72A54E204D1C1B6916E2ABF5
B2EC4E5F9957BBDFF06EFF38D2448D8DF8EFB61253C837805D7BAC8046DFC3F1
C85E335DFCAE5075F988BD9484F2D6B94F1294EB78A2F68278EF71113EF63B20
B2C1B81FA5A78EE72D3F7A78592128C6699442358D53B9D31C03AAB7C8B15D98
1DB14715ECE40C9A9FBFF525C63B7CFA14FF1A3B223CA09E40358CC8945C958B
8DA7E7153F3CAB57B1A27BEF7F302583A8B0A66E36F142899DB0FE1BB6A1A133
6E4A757C30BECD3049923CA6285922B643BFBF33EB911613C87392E4EA5BEC2A
A8D2BEC857182916DDCD59AE97318CB05F5C32363E84D182F3B1BC1508FBCE41
3C0732FAB1B8758FA9B126D3263C7B2932FB3D7E1F335DD11169339A1EBF394A
F7EE7076395E17C2080BF19B870657945B6D02759B61E3BD0FB4DE330D2E5FBA
8AF4C016142C1A8B337A89D992FDFDF31AFA7A033B01F3B878BB4C56FE082AE3
A7C81FBAA0F51DC8E7DFDEAF33C46987942849DD957EF2DCE3A0D29F9620C41D
B22EC0C73954D2702245E1A4329CFB5F82A3F88246CAA6EE15DAE4192CCD0F20
1709D9631DD09E5DCD0AB4CB2B0DFF66A17E443B4F03B9CCC16A0DD817976E4E
60DA09DAA393FE6A4EF4B467065FCDA591AD45F405243EDF44B4052F810DAFD5
0612B985AA1BB8A7F709BDBA6705D80FBF0AACFCA7D82422BEAA8E76475F7F5E
1A736660D9AB5E2903DCD54476DD446BEA201F714664CE83D20AD69E65CBC555
CD4740BD31A9BDA29B8D036473E7C5FF6EB74EE0D67F0EBCB7705A43DA4915B9
ABACD63CAB3F114572559EBBF5683C070D78A06006E7E92D25A6F5EC9E278066
61753CCE66213A6163B8B44C9A89068E3B5301D2364F883A19D0573BAC967DB0
5685E1E2031A7EA3B7A971E4D067D2D8A66A55FFCCC8EBCEC593DCDB97D883FC
8742BF8A164B1A9B3C176A090A9F6851FF9FF10CFE04F29E2AB388D1E4902CBB
38AF4DFA01B0AEE3ABA7AF04C8C43F34AE3C09162E8A4FC6CD4741B38836CB59
9DF98A246EF0161D0B6036E7F654E1FC0D9A9A3FBA49EAA38A1EEB114D1360C7
11A40FE7FE508CDB795A3BFDCC6778918B4FFEA71074FF82BE314681410AD737
7674DBCD9FAF13690CCB4B6F6B55ED1D99EC4B79D2F5EDEA14B7F6011F8A64E1
A2935F3463195DE95A253AD84C9B7EB6D773594495E0ECC246A1A96A67E7EDE8
C1B81FA5A78EE72D3A756C4A30853D90BE54207C2842045E4CB16FC9F2FB688F
D92C3919755C48B4F711372AE3B7BB1090E9EE695BB39EF330A07650344DAF45
A4816FFF15F540DAF3BBD92A80794EA774CAD2ECA4581BD58ADB6AB154DAE795
70F5385889A6967942A943FAB5E5B26B8567CC9606DE652CFA8755702DF94F34
D4071E65B1991419335CF5D622D7B95FD18E974B39A53B5DCDCFD9FB21A2F8D9
0C4256947D9D4CB1DBCF751C748A7ECE0F4FDCCA3F1B81FAFDA0C9420A7F1147
56E54FAAFA7A308B95E6FD08B088D54055823DB7D1D12E2435634CF69890D14A
1FF76CDB49B4967EA0E4C588F40F4683C2295FC0C58D564A2A4AE299B32E5FF3
872C95854381F1D0D070EE364ED35373AF1D958F1A6B52D6FF2F1F28DE13E4B5
25245B8299887253B78FA2E8AA6A9433272C23534CF0E8DE3B2E3D4136A28CC2
6BC8DA4C262467AA66CAC0D20720013D660B929362C1591B12A9B82CBE1F3F03
D7E973E74B0DBCAD0D323F06A1983104FD0583F6B3B0E85E66C882C0AAB42436
D8F78AADD66BAF9417F5CBEBD5C3BD509174EFC033303F52FA35645A7055198A
6678913C5260CE1A494A3F81C9D5B5AEC28E256A497BDDB956F6F57664A8A8D9
BF3903222588525D8DE1064D3D38BCFD8A6EF665B578AC7ADA60300A5A859710
93E1123A36146FD621714D304DABE2D4C70D28843404104C15310CE97650641E
B3FC5679A4B22246BEF213E56AB76C06F6E27BB35E5916016B2D82C79DD3C13A
D5355356E8F66CECBE53DACA901E262B77314B3D58485A41DFA10483B09CA310
FBAD52C47A5FEB0D6FB202937612A69B16CFD8C3E1CD1DEC1D9DF7B76C7DEB35
FBC06B01915798156A41843A34049ACF9A6AE732D69E07A320D98628B9430467
A2B7B8505D86DE3291B226FFCA063124461611FFBB09DDD3D8431684EAB1BBC4
820142F6F29E86170A9B10060EB21C635D2245540D09F4D98FE9E8ACED1A4AB5
8D881C8D195DAA33384C70519D1D4C79DC032065F20BDB3CD1453C099420961C
F38304F0014517C0405C8F99D4230693737564E87A61BA231EBDD094AFFB69F7
0B427C5CC5A09387CDFEA4EE0B707786C037F2005913CFBD76F649D137FDF741
53BB9CDF5BDE6C24FD0A781A3CEDB9BEA5F02B2C64658EAD1EACFE612AC70EF5
F6BE3A62B83B64ABF69820F435FA193F5BD70B02F09D6D985B6F85B444911535
225F26677759BA98FE6AF2BE62CBB2B8D021488E56C93058B9C903959847D4E6
81865BAB7D2169913A0C1F0A9AC6D9290FA67C33DC33A54AFBB174BE9FC57A29
A2EDE2DCF7B1DBEA2EDAD0B37123C97C9150552BB891670C85B22F4377E4C347
EC5A0705ED5F2058272AAD389EBE9AD9949D0E8383727AE23FF80A95C5045BBC
F798469F7E41FA568BA1FE13640E6E12248004676455579D60724C0E4BACF837
EA7144E59329C9113718B0DC649FE6FD13376564295690043A8215C0633ADE0A
B9ED03959FB58614868504D8AAB082C5B02DEDD276972B2F19A4C8CE5F0D553A
135AFA556E38E37B1A06E5CF69FFBD3524ED1F2BA7EEC0E605CC899438A27981
2FD6F6D3E92F135B8BF21D3E89FFF1A2BE9812DC4660814D01A1FB0AD7ED5C4D
1811C75F739B47404302469CDF2284FF94349CE1E0970CBE494A7231979D50A5
CBC1F97242E1D2EBE9284B15A1186E3A4DDE61B650C6F2CDC430350ED0D480DF
588DF93B6925DBD620C1948887A6A65E97A6712C01872649C885A3BF36EE10A2
A8A57A14B7F20C9FF9A2AC9927CD5DD2E50DB7089E4290D85811DCA26D765A79
BD25FADDAAB39DDD280A17EE1EEEE783F3DCDC7764766AC7A6BAD2BAF62D28C3
9E8FA4E174E13D1FDC905C86493C8F2403249600629639F2141296A3A5FC059C
FB08D27D29242D2C40517EF15F35CBF5C81DE2C6B4479633F309A397FE465B0B
FB326FF46C364A8AA4E1CB1B881EFD93F3EDFBCD86E87AD6BB1CC77DE7CA25F5
4FCEACC7DE33DB5A8725573353B099FA1D2FFC2C978686466F8D6A3A11ADEECE
8761730E06047C737DCB29941147F4161CB89BC95BFBC3044D12B8BFF1E93C79
A405B3283117FAC862D2E700A3A861ED6B2001203536055D18CFDB49A94EF08F
968A91389F1C31D549DB983DD54F142DB7796532D40C7BECBE1C6EBB43F86312
D01D5952DD09FA51ECD9B780BAC46073E4DBD66DAEBCC92A5CF19FC95109BF5E
69B88B6398464924D7635D7AD4D88D93C0C85487DAFA8359C8380CE25989D449
865CDF3B9BC487B82AA1E1CCD9CF2F861C3EAF0F421AC6CC18134CA9B921B004
E932567A4FC41D5C63CC424C022B0926DAFEB73E5341681A91D6659CBBE6FA99
B00217C9230C9FD5A87ED5E2C5139DAE9E8D9234555929371445FB409EA4F4A3
267A24909409B0F9CA0F9FB802170C734C899A22A7787783E0768661BE0923DE
D10FEC2654E629C71A5A74329ACE5381E86F211EF04538838658410720E26C3F
6C7710AADD9669AEB8F7F3B1F5249E00D70D4F243943EDBCDD4DC9E114DC689F
F60D372E352AA31D3CC7DC6277B9A56FE2E81418ACA16A1832E10BF74BCE3395
0BA37CF1862E8A9B590C4D5021F4DDAF400382AF55E0FCBBA5BC008E6DD1F286
37D23BB2F6417DB06F0357BD3B23146FE7CF364ADED41254CCCDED10ED0AAE46
0E2D19A7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E9EEC4FBBE9CE6AE8532B2CD4
101F1E68B19CC8756AD1987CCFF2302525BA8389489E8AD29C974C5A18DA8F05
5671EBB8954C3A90EE42B2AFCC9D2F52165A0DF06D6A365FB88544455AA87281
8C323EC616CEC04738328542CDE8B0B5BF7C93F1B7E133F3A0518EF8DE086451
3345AE867EC3032919647C526C614C58D6AD7668D50EB5705B5F8F86CAB5CA38
79405DF665D0513A29CA1598EF607BE11D603F92B2607D41C3029037A543ABB1
E059247E276E206CB00BED125C8F78AFBEEF8A8EFCC84F58309D656041D58C14
FD6E83D26D13AAE036CEFAB476721A2E3A65C2C5B0C7A8CDA3DC3F8F945E8803
662299C3FE983D7D85435A622644609E4A0E2A68646E9583B6B9A75C95840BAB
3FE1A886815826A0132FCFD809E2BC34AED85936859171FC5B2E0903AF6D630D
C6F2532EFBA61D0CE72227D516759EE22D9F51DAEDF5873816653E5215E436CF
C0C888385900D08491DFB085E6A13EE6C92B0797073BE1D91564F0AC54D70F8E
FC63B94F73ACBB4CD279716D9F482833B69725F53363FA3896798939057C6223
02818F0F735BA0468954522498086CCE1E87A9435170ABB7B721D7440302D3F5
0A273DF58E4C5280F43D4DF87A10E9D566B4A07963E6186FC14FAEB626F3215A
8E2F994F235FA96862D6E547C966E53777E6C6140B818E8D945FE492C0C783EC
9AC7A95C0832ED8BB8E1237B3467B1A26791BB653B865750745817CA28E22764
7070692E6AEB04EAD823AAA6C5FFBC6DF009421B48C8026F8DC0E546617BDA40
97FCB8FCB635C4E8170A5C4DC3BE1FDAFD9348548BA85064FEA8D15C16287F69
04B70062C170FAAF08633A13C303EAE11BC25DDBE9B37E12F0638352EAE8A9C5
6346AACFAD40420232C78385EFCA29AAAF9A225424A889FDB971BDBD300BFB75
B710119768A161F8C276614552655D10351AC382CAC59FE7782CE421AFEF1900
4F3B4CB98AB145E4C03D01CF167B0D7BBBC53023A12C5B3581D8F357E6151437
8539C64A60A92DAF8DDA4F790910BA6CB5DE06562E19C10201720A89FD933462
637E8ACEC4CA134F49C052AEC61197C0E5F9156351525DBF6739EB7928E4FEB7
C24D3ACE00252C84962495539FAACC553612E270760176454A6A55DA20C1E80E
414F4B341CF635053D9DC9E1A6CAEEACBF9E4959F2D4F9D1CD9445227FC81771
CBA4D7A17E915ABC0F41EE15755915AEEF0811B84066F22D83EFE185E9607CD1
F04B71BD73B91D0FF399B5EACA9DCE1265DB6E7C15241275BE29828A13F623E1
6CFD2AE0D0ABD11F5391A2B42A2CC2C3BF28C1128DA385B17ECD04E71DD343F7
CA38346F14424714B3C31CBAE9775E490283C05986F7A7BB423D1A7CA1DAAC2B
CC25CB9E1F33B373951661966883D554BEEAD9774BEC3DBF6304FF44DE9BF215
C6092C66FF8E42F1EFC78AF24E9D390EF786681B044111D831971C4BA33E9FD2
06A7B97E69443C961E0B060D472889E553C988126096DD343532E74B59C0AB38
E1D71D781BD8282FD2969975CDB303737E0E286C5E86F0126AB25A5CA2875B48
C61CB8112A4CF9B8A7B534C0238CF65B3DD3986298DE5016DE66B3DE6237E6FC
9CE04E7AEA2C7E4A824F8054FE402799ED4DB5A5B214C02A57BB9900E406B2FC
13BE715ECE4B585AA5F99198A39BE62AF7CFBAB277B8A66C8413AEA916F69FC8
885EAD2CAB2644F1E25DF5F6EF5B5ED47CD8B47E300E3F5F6B8B75060C761A63
AC861E5E78D3780BA17A05A01B74BF8D0AA0BADF717AD3D206B1B10EC0CDF70F
847861AF5AEAD56C58A80E3B3A615126FC0C7682845F3E4266B7D327312EFB77
0916FBAD42C1AF86E6ADC99C2B3950CD64B436889A2A6C9C5A5FE47C78E253AB
62BB381907EE377CB8DBD44016C22C178C7AE024E79C6163F8A74C8738FC3DD1
ABF1517E3FA905E88E03863FA67D3BD8E03F418C44A895C34F187D767EDE855B
520ADFA07DACBEC45BBF0C25F7D54B02C1798DF351EE40FFDDCF72872069A157
A036BA3AD68F33395EB773DDACFEE7878C8F61A5425FCD5CAD3B0B79A7504BBF
5BA6C59C6BE0B2BF3FBC775E6B5F9B81BB9F60DAFE12589D767C4A5C46A1425D
45A3555E2922EDB5B12AEF0F493C52096232783EB060E76D297BA2444DD1B0EF
DAF667A918171169D8669BA7743ED01DCD21A0D693EDE69EEA738AF1EA813B29
B388D1E4902CBB38AF4DFA01B0AEE3ABA7AF04C8C3082C84EE337093F5C8B64F
4CCBFB12C66C8B6CB9EF558FBB0DD9A6A38BB39CA02AB5F588B398433A7D25C1
F5EA917CDB0ADD125F3F0FF5A420204512584029A7E9B66C33DA98ABC59C3BBB
768EDBE59812128726A22BFAA076180EE76D3BAAEB6BC12EA0C7F7C605BA7278
C5059C8F57A253ED53E3F037DF64E7AD0BF961A10834EA7E4118FE0FCAEE3C09
73F43F74EAFFABC289CD9046930D486CF32DBA9DC8C6BA0CFABC9FBE6FE358C1
B49A6A8B02ED602FFCE688FA6D259E07B2B1318C29EDAD4D724A1A17460272B8
BAB91BEBFD96372A706FEC5F261C08D5F52DE84CB9C48110C8B3D0C7AA4BD2DD
E952670C6A3287CF967B95738828AD8F8D6D8E07C831F17A3D599AA1D6D5E4A3
A680703F2FABE9745F315306A699A6625A3AF065293963481B0BC8F794014C50
8915ED127695D6FC07A26A872BFEB24F4F51F3469CB813D1453D986E24853C42
E8D001B7C8D31D6B38A90AC0353C714458518BD7849F093D3B4C83C70F6F47A2
F21CD6B7480D63381B1E2022957AC237C2B3642752A12BB4D83D94D9CCB6C0ED
8346967ED5129F1250190AE610915A5A3F296EC77BFB2847C143CAF7153A1459
F6287FE5D0DAF43043794EF59D71762687C9B51789DEB07E7A581077F2F83896
892EB69F7C74BE20572943FB64EF33B2776180606E79F42F69D1037B93E3B99E
03E117A0410EDDDD5DFC571BF0808DAB248575B3DD0395FC346BD52490344F0E
5C238061041CD9A743F14CED191427645922FDCC23446359F56EE921ACE884AE
64276F7A1C6D74DCA151350056C19A1856B9B2658795263EE1BEFB8C441AAD3A
3E384B6993E5EBB0EA70A0E87927C9843246EB78F9B7BDBA59ED753971D2E4AA
3D5831D8BF94D28549FE10A4FAB74EC7009623DDD1ADAAD624D5230FA11F2CD5
AD93AA7F5800E3E6ED154AFEFCD6DA55C6C3E3E17C8704DA03D8EEE067B5F043
7831CA7709A1BC62EB80B50B0A1561DE7EC44882A381DDCAF29C85B1CC8E26F8
69887C9433C15790DF322C3C9E52C8B53DBA02E533455EFD0EE88DD57881B95A
C7601E332AAC0648101872A79CBE93E68AA1B51F73328C32ABAB1A9E0F300046
FDAAF97A210BFB2E3646F0E86FF537CF3DAACC9205D9D2C97A2E194E71122E02
0BFF5B4F8F28D0D5C80FB050ABEE57FB0E204E49923547D6F608CA268562972C
5181D189FA7CC58870E467C0A77E0A3DF163F3D1F6C911D360580AD6FAA5A617
E5379E371F75C42A86C70CC89DECF50EE0EA45AFC82C9EC206604DAC66E537F2
D2377E0C0AAD852925655F2728A3D28CDDE2A6A9A49C3841EAAF7E5E35F75607
75485263C510185BC34AAC67226177133AA7CD431BB677621C783A24F95BD0EF
FDCD8FC061A2D99F8C01DF7A37066689BF00D01E884D9F04CB52182197311EB2
A8AAA927FC6E077DC85C01A5EF4EA9FD20CE0FA2FCBB7B991BEFF46C8AB67AEA
245C01E285B42CAF3BC022A9FB93BCAD415AAFD831E404573C5860E877242A0C
065340E6298B3B7A30E87F9D6EF48AFBE10EED9B12634F5A768CB488A01868F8
F5FC71B44F27AD672FA7FD2488C0C56BC9B7259086086D6DB7D4E4CB7F8B3ED2
96896A9318D430B2342B9D3806FAF0FD8C3F73B1E7610C564183F2641C90D3BC
9C9C20473D6FAEBE7AD43426C00EDFF20384F08EE78F508778BDDF17752DB246
DF9FACDAAD6E56338170FF46E358F0043AD5D0E75CFBA16353A2CD596FF217E9
DC7CF6ED25978A39A509B2364F1C5172E6D0D74FF44EAB01854639169FD55FD6
9B83453029710375D9F063B335EECF830F146463EA4C9EE153C4932B82A848D7
9FA1F2720A3A8B1512EF170673878CD8ECFFDB927363C2AA98F7552CECF63C84
F805008BBB21CB105CE9B191591564BE5B1FC81B01608C0518939950CD705DDF
A6951E6FC1DCA5A1711A0D999EAD1005C1626B36874513051AE74F675A850754
3B87012E8BE9D76D44FD4DB5CA4DF3A6189F8EBA344E73C74148C1ECA1385044
A04E04279AAA541D26750E85FA093624E31407F8674EEB53294C36C60F1F0669
8D3E30BA3AE1061B2BC1DC4A76BB90419EFA4512B1A88A9B10C36AB7CFEFA706
0A3DF1B2F1CC6BD8A9B9AFD9BF39032AB0B11E11307C0098265EDD8DCF56238F
AE38BAD2411A0DD8747D50523B485D7B3034BE4AE9BD9E3170EDFB7F66089F76
2945A54D59B75CE87ED7D9CCD2889F1C7F6C1FEF3DE85654DD314A3E8F9B3DDF
A7EE02876BE629FAD04C635F1A978618C5ADAB82600E4935DE352882F2F4BA8F
D80CF0BCA90F5F05650FCC81E64472A7FA82CEC5F7D1E86660DE23E6321DA20C
3D092BE8CEC412D7448B318C4210875EC8211A48AE998ACBF266FEB7DA27CFC0
DF14AB47FFCF02B188A27DCD8BED5A8ADC08C3473BFE69435D394DA77A9EAFF2
692126B4FADC35EAFAC09A0EF935042D304986275A70F50A261966C9B8A2C38B
DDD8D1D01D205910B59C8AA758A87DDF835A13793D94287A2F6549DE50AE94CB
0BD12DC5FF85C78CC6C252C22417D3FF82219174CD234BB8A21C0902A8E27D6E
6136E1516B017A4B97BCEC0197FB433EF36C4D4B49AD4E8EBEDCBAF71B31D841
9567424AFAB2CBA3411CBFE69C65C72E9D95AA2B96376ACB4E07FDFC512D02AF
D74A40A961B25732F445923F34FD96C0125D753BB27B9F6C42DBA78FC2B63CC8
8E7F0A2916CF64A53CCB175707BA69D2F0A47FDE12AEEA501FC23DA2C9D3BA92
E7CE9570D1AE2182B81407074DB37938A8646EA2610F6D06B7CFC3EA27B482AD
0BB145DFCE6DA21037C1F0F1AC0C6FA2790F5416731F1F59F198866765231285
BA4F36EBB23776AB56FDCF5B3336F149FBA6D0FB99CB8C4436EC49E1D5A80CDB
DE3C852FA7F0A98FC8D0555C221061471EC71E4ECF269C88CBA57EDFF9116F8D
078B458E3A0856BD5F18E2363F702CF1E53DA65A472B2F5AB33EBC79568984C6
1D5BD588E1BE1A1B50F0DCF9157DA98DE43E1092B9B71F72A1952D780ECD27F2
4B77554F6167ECCDCCBB198903BEE40A9F1FEE2CE3375D67D77D11B92C05C561
E56E90A48FDBEA688E80FA438D78057EA80AF988CAD3B0002FF10632B01D06AB
FD3187F78A7AD6A96D2B6CF97A51AD5E0C8146B860B8E4FA3D646E65AD91DCCB
7B5F7ABCBA1C7ECAF12EDB75CF9367CB92EF11479D62800711AFB48439C7E34E
9913F808EB05B27A816F939EF1B0260338ABC010C6B704A31F66C331E2A31271
EB7C2170458F1AD02C5DEC207A5BD9D7CEB4FEDED2448491EE057D1A08126A1F
DB0E25BE8FC7B33BF096F6FD9B816CCE4299CE52B198437EDFBD5593FA8FBE53
A16D8BFFFBE2BB522213986EEFEFCA32839E02BB2665B7B4AB884C12DF092CFB
D8605E4740286DDBBD8BA9A83676A5084DB083B398CAA916466CC0692135EA80
64294FD78F5D37AFF3CCA0833836741674A315C8CC7A8AF7577F65DF9456456A
E85CB8B4A84FC059C199946E27DC96828162AB7C400A1211712C9DB2DD051A0F
FE784EADF5A5FC5D32C3D8CE0AD29E74BA70701B18DD98B536FF5E6D0272FD1B
8220A205D75B8B1E9A20562D29FE84EEEBA2AFCB9371C66F61A4EB0B09EF2A30
E600F175FDE517B61B4EDF012158575691488DDF0F6604B36A1FCEFBD83BD77D
A24D5B59E41C16332B2FB45C8C02879AF1500FE9A95034D47818B8235920A92F
4F2CFBEABE76207E935CF4233C2614BB02993C18F5228D9B00D5C9EC0B769FA9
1A58C18B302631438F6DBAD96D936736650FBDC39FE0CA03354F8BE1E5A8E1CB
81221F5C1A8689C526B4CB5E70F2FB3FD45D67580FF6ABDF399BF34381A4072D
730933AC7474F652E751FE43390B86EE88FB7466709440F40A510145D846B4B6
7DE770476643D36068C4465DFBFA096FB1D1015A7D5E08FEA6CB103A81FD21F2
EDF42FF7D1A5B54F1651DE7A96133B2E41002B721B821EC6BD0EA36AF95DFEEA
BBCA93CBF9681CB6BC61E13B7D4DB74734FAD150BCD1770C8ACA8AE07A704804
950B24EB77E4B8C7606EC7A6915A9146364D9C8E8A7E042A23B530027969E32B
234E56CB2B0A4AA5E59A5246C6FE8ADB66399192B5E96803D47B8716186942E1
195AA17C1435378990758FE706252278FC073091C856073465C3098121853F45
139BB7B51B058CFE6EC7D09037DA9205423433DF08644FD23DFAD8DC74B8BECA
CCF5279BD94D4C171EACFD1B1A8778E0B52C62DEACD0FDCC74DF4CD96D1F2F4A
7871DC1370228F91957614588076E87C1F2C5477DA84BBFCE3AA796749502A07
C6E610677414B2DFC5F51ABC698E55502BDA047879773ABC008ACACAFD11660C
C732565D7A8F147F11C3388CE533F9A733FBA59A7F54A2570B840879A26D2241
5D09B1A874789AEE574943DB29155D93CDC05BC0FE45B681C73C50BA9A41D3E7
BEA2ABCA49F3BCA51F5A6CBD8E9D15F2EC5327E023143A21012A6EA10D9C8D74
1BAD7871776B6A4EE93F1206C63355BA19E2A651B9017BC1B8ACC9DC66783428
D4ACEDB89CBEC5965E246EA0675264922F9A98E6FBC6A4A4B66AC6349E6D0919
9BA12884737714C5FF1616348AF93B8F7A361CA77F3E807FF945B24970EC6078
E5A3DAABE9B5ED66F92F3918E329298D9F6293E8614966D0AB09374D0F724796
2F244E4B3E549324862EDAB67CA40889721158543D00A6C826340A00F2165395
3D75312631D67AADB6647FA2BD36C65138E3423354DEC0A2E08DB5A229D32063
EA45283090CA40AC9B2187C23CA6C33B9C8B4D2D223998F265C5732124456C89
1C93CB67BC155659591F21DC04462B041D2DFFA6C37BF7FEB892EAF57D6D9CAA
C52E6231A07C57B6F2F4222034E26ECF6E384434D06CBD17D6E0D150CE32E885
65B61DC26DBE2DBA7CCE0628EF45E6CF00FD8F437B68EC03CA34C9AE215D0CAF
AF2E44AAB80A39D65ECDEAD7C9752142528610D5F27B6D201250B2D05387AA98
36252961E5DC84FFD9B42847CA52D74DC56B9893EF629F8334F3C12C4BFDF180
4E9D4E72DF9FAC1A26DBF07A97C99C42D427C9BC9BA5D010742945EBB75A6FCC
29BED1150C2282F119071E60F40B3D38C945189BD8A3B135FE80AC815B40D0B9
B0DC444B55663975650597315087F15E414D6998A0D828F43B961F5A8E4CB5CB
7CDCAAB75784084F19F3628F1B57EA60E62B5A4D36ACF8AAC6BB0AF125CCE8C6
2686F4314197759335FB9335B3B68CEE009B0C94C7705386543593E1BF7FCB8D
85C03BBCB636941C46A93E6A7F8AE444F94FF778D712773E017FA9B62AABF9B7
61FAEBAED9863A044182979BE5B243819BC36A0BB5EECA86FF02023C833F2E36
C29272C8BDD788D69AB6F539560F9EFF63F712ED499293EB6A6FA14AEDB76572
66055C6E1FD20AA9ECAC22DD42D197B73783D65CA638C448A782F0BFB4F9D70B
4B207AB5E7431A6B1E8E0C4212EF567A0230B6E228E4D29AB1228A867A6E9410
0C4356F5C98627469123F4863C43F7B4CC48ACE2B3FF6A858EFFA9D7B7F997EE
EC85221958141682EA563D551CCD7325032D076191547AED74DE89177FB52538
7982B4D15F5501E0320E0D0A09757E2EAA6F607BE9D3ED593F00644D679B9F17
7560241017F79CE5A480D5832B62DA6AB4EB2BB069A8B8E6526B66BC38B0CC96
E3BE04404D6BA6A6F6B9CA628014531CEA9C31F12912E2C9A4839B67C4474A87
23AB9B804DDD516B2A62CCF97EC94EE556FC18151C26239AE8CBC40284B126EA
C9F41B753B4E8CCA40064FEBDC16A262B8E2469089E26FCE9718EA6F12BDBA21
47C5E1ADA86853F16CCD804C9765C90D3973C220CEBB6631121C1FD58572AF77
71FC18A647444B03564B01A1EE8086E9A71D4C020E5B8B0F4C985B5A90903BFF
8C8003F82A76F84AEC6703D866CF9D1439C8C73F02EA2E6627C292001D28A406
28F89D0C92DE664CD6861D1EA26A509F71696EFDEA1780947BD48064EFE75290
43885CBFBFF18878BF0190FE8F8A7AE0C2040DE5F9388322148D6B304ED84502
ADC7D48D1C8270E1803EC07A69D9B3B0E0D4BFE74D9C2F8B80EAD33A950034AE
06773B43DF953567E0835684BC8E94D4A8A73D61DE37F059C7BDE87ABD1571ED
5ABC8962246C66806E932AC55C1A9B7F8E39AF9C140F0F820D802951BBD69136
5D1E099A1A835C7E2BD9F6B303E49FEC4E7E52FDCBF60AB8B0C3B33764F1C9A0
BE6DB6515DCEAFA6740612C43311FF0E7A075A554F9DCD9DEC4F0237F1891E70
B91D6DA92D8B9D5BC89BDAA4858F51F061DCC9970506D4A778672A022D1935DC
96816751A966E93490C7ED6E46D8FE97C313D83D481291F19A9017BBB1794641
9D977FC35977447AA55E17CB51F7050BEED34039982ED5E5664949215B7B7C69
9903F93ABA4CDD5EB00E97B36FBEACA9674C78EA7E21DB0F7153101ECB4849B3
E0E8D46A3090B42801AE7A97DBC8BA13E7577A7973DB0D3A6929C8706D29C8F9
469F07521A6600A68BBC9E92F80B744761290E8ED0E49466DEE887E36E436204
91E2C870B30F3A593DA2285CC25AC742E876D241D5729E07930DB25EE927BE09
FCC7661B950D0AEA43556768BA33610DA9AFCC96BB51D59C946E05361A8CEDF7
48D5E2DC2158BC1898BBA676CC279907E39B68ADF5417DAE6E95576C7F7A2A25
823683BD51D67648F05F04CFF12ECC6EA8BD938949438A3D3510D28B3A9C6986
7428E809E78AF0299948B51235A529766FE954E0D7B012185FCFBBFBB71AE71A
47B9E18E48F5BDA5D89F2EE08852087F5FE1A6FCCD2AAAA431B36F55097E479E
E81B9FC371BEEF45014EE987DEDDF0724CBAC3C084F337D2FC2D7BDAFA02FDA1
42C52EDB1CEFC22E44808A443683C122CD68051F08F732339935244CBF078BA4
F1C73CFB122A6161D512A8BBEF81030F8F05464D998B930B8273C01FFB12AAAD
EF6E32B9C3CF98DB65E06C257CDE0DBDA252D3569A000A9E1495F42F9CB57968
A619BC423F77E4C57E1B2EDE3B4418CD44C3FC0CA87635FF92F1140B734F8FA7
3EC91D432A15993A4D37BAEF27F403EBA7BCB5D37AF24E4C7549D9368741A553
97560E0BA139DA888928075B9DCC920A5FC0D6206DF1B2B7701C20E811C1D2F0
CDA4F4CCA46CBC2C0E86E4DB8F5C31418FFC78FCD3D312116C9B9732C4AF8647
6579DF658AC6B29DFE3C4AE133C4CB22B633B70F38D563819330DD52912F3D12
4C6CA0258AB9968C77CFAA509FC09A722327A7A708294A487609CEC589974C55
513AE7854AA9DC543DC65D492ABFB263293C90C378015182917E61CDB10F418F
39EFA71A0DDCE149E75A28461D686F83297FAA98FC982486EDE8807EC46C9797
9D21C7FCCAB04C276F6ACFC459E129CAFE08AD0BD8A2445BC7ECE9602FFCE688
FA6D25EEC587DA5B373C94FA04525578C415E77816697D4933E1E097ADD44CC7
FD977263B0494BBA03B17C8BCCBEA16A60ADF3ABFAF4D70B303E2D6010F849FE
4E17A69F02E7B4C69CAD075A2D04D05046DE4B8AA759050A4CD64E67D56C072B
6E9B96CBD0A038B6BA98B6078C9FCA1556AEB8E16DCD3A95911E78F990231066
888CC3CA21D9B855B941930630857BFAC59ADCDFB637B2AE97252B52101B6F33
F63F01B61C9A95C15573DC6DD4AF01750636932A81F9283E1559F40DFDEF78BD
5B80F9D79C8F744F224DA5E87ACE7EE5C6D6CD198B29532908C44B42DA92FEAB
15171D210B0672845D8888BFE28466DAF1EE97FB3C0E3AAC02B283FDD8ED19C4
D792FAE79344F2FB3A66F8B88D3993DF034548E5238A00043DA7A93AC3445413
80B52A43529A894801ECA90F50E1C40EDD6DBD115CB6E00E3866E88FC69A1212
7AF07E493ADA2B581BA1AA2AD552E3E8BC9BFC6F9E9659EF4C97F533A5DA8B4B
245714A996A44D8DE9C349DCE5C6160D6C7042DDFF33A954DD01C8E21B21F8F3
64F0C9A73F800271FBCCD9DFAAB5E93F903A8FEC0119ED1E6C293BFA5828AEB5
1DE5F198A1BC7BB965C8818A538A1C37C3661E84351914EACF7842A4BE1404DC
5996822321C604206DDBDEE99048E6D8D3238AB7B166C4CD509B474ED6250565
09BC9BDE9DEE1E8951142A28319378A288A28AF4965A35699E84DAD2BB262226
64A366C18C83BE4CFED753FDD26C83FC50615B20D31CCA7EB216D27AB0D4EF0F
44BE480F257C511C3E84DF1D77158283427E3AE41198F23F53001D92DFF3E0E4
CD301F5FE888E50496D0E39C9D5C62A298B8BE48AAF79E7C22E2D14BDE2BC817
42688054ED5805F3788325FAB9397B4F558005B2BA40C923F4772237BF80D6DD
CAAD263A94199BEC2A47CC76393F477B57D3FE2050211E3953CD7AD902BB8A55
7BB98C0E42A6D1723A3E55FA153A5BC5DC02E75D32A550E2D0F0215182327F25
A0941752F0B980E03EA53CE39DC98A8B5689F5394B8A9E76B74493C7D5EF98B2
55DE9095444839B4727EB7F018AD7256FD41449522B0C75888011D8444929810
3FD5E06A740CCD3F25CC8A743C0D54ACB9AFA8C97DB4A9605D7BB1994DF47303
5395D13F869EACA7CB8E4BF7B9BE894E8BC2DE9E92FD65001B7D5164655C3C07
73BBC39E7ABC220C6DAE2CFD8E30F4E5FB48914BFFE916A03226AD7CD708AFBF
B3AA3608574A2221ABF047F7673D42968B96770C2E557DD51EB6122462DF182D
A9445046F89951CAABBCBD025CBC117087F070B9A6F3BD54DA6F05DAB1E7F3D9
B6DBF0C28EE9D5549D47EF4B9D3D234466B6DCB7CA827D6B5DF1C19005C6AB44
74C7A2E27707AC6BC6C799190DB8F33FB4FC78BA770F1B5444BBC6BCA78D6795
5A400D74F793F0C0FD53A621165650217D2313A5C0E81527DB8C012FE008C939
7F61A2B4681680065BBE0C88FD54EE2CEF792B03DA497BC30277594E73D33FA5
BB63EA46F6D0FDFE925172C673551E213E97DF6052EF6435BC52FDFD82ED2EDD
0438C58C095EB3A1B28850F23166EB7175C8EA5084E4FE42DC9721605A36E84F
1D18BC955C1F1703EB9589551801FE252DBED89160E8548A9B889FF7D596C7FA
90D2BEC66DAAA7E3C89E22CBBC39726DCC87AAF5A89998A6091D7F74552EDC54
47EB655943BCA94002741D0852D30569DD5582927A3AF48ACA471014AAB84BEA
A290DA42CD6DCDE25251E42EEE8091961006047586687B922FAB29E4F73504E0
F4CAAE477535AB189E21B1007F219BC41FCDCDB4B4D09C4228DEC53A408E486A
8FE785219CC2FFD7E12CE5BC2E1A98C036144C18ED254454E9D978C77F1E9E3F
57CBDBE6F2ECE38C489EE45AA92042E16E1E63B6E133FE083DD07E9598B02FA4
B0CAA5D61EC703FA7158D4F20456C6FA92367F5393B8E8A9E55A7EF9D60D74D4
DA1C63EB7F743F2A66BEF878C9ECE2335039E595D124C1A3C7F5F57877BDF0EA
CCD428AE2F34875EF6F96ADCB70A58401BD345D8EB288D3F0DDABDBD02D45FE2
D1AB89F540F4452673990391AD655C3F9027D28398D3F42F5D63E8481F488584
C567A45CB9CCE03028539338323FA90D597B2D336083A7654CDF87610037E0C4
7976FBD0FF2B9DAB14A412066E296901950FC2DE4BA44C9371F649A18BD94D52
CE67B6A487F14B9D9A5B8F251D758711340950B04DFAAC441C71C40259CCCCE2
B1A9F2AF3420D94859E53A7B2B0F0B143D5B481D28E5F9121FEB325CDAAEBB9E
E558CAFFEAA911F574F328F8380A8C1306D88D27F78288D612AA2F319FC2E8F1
BE3C38BB6A7D7E35746C6580846E1B76E8C54B822246A3DE370983C8D9B1255A
99FC7CA605EB0B40DA688CDB299074B8F0302E1AD30AF12918A78606BAAC1CF8
F24A378B308F05D8E23AED96E50E8DA3E3B98C393C286CE1D73A4BAEA63B3DF4
86B0CF0D1A2BEE1E1B87878A6B0C6952C2BE807F804C43A34C4CDC8D665D19C9
2E97AAE9039F6096DFB9679D463ED4BA1B11DEC0EFE44BCD990D8BF020D5CC5A
46DE8C19F8CFD9FF669313C98B6E86C64555DD8E2D524A81ED851BF5D02E0365
704C8276DDFA84E9CEF0AEB2DCFBD98AE471A8A130CB9CA75536156C73A1C879
15283C0273A1834DBB86EA4FEADB3E33D94661E91664F2AEDA58AECFEDF879B3
F07ADC18B8402BFC6A55FDA961B82CDEB9B44EC8B9BE751EF18F4AF885F97BC5
04C3F12269FB8E951B1FDCCAE298C9C89C2B25F68B550679BE8296FA46D07917
BF3743387879C8276617ECC9664D97C93D7A565765725D76F2438AEDAA38D89C
512535FBD2DDF687216684022EE22C097EEAF7CD6936B979A3C1B854A8AFBB7F
86CC16D8BBC0B3B3BE2C7C57C0FC708C1856607B0C5409E2CCADA70427A64291
BE756E502659894CE35BBF3C91DC0B087F8D5443B5EA52C15F5AEFFF8A19327D
EBECB34840CF80F2446AB7DC54A531F6951BDA2C3FAA83FACE4C3E09943EE3A9
3B9E23D067C9AC8C8655E075C59945881C9269936BD30FCD221F518AD33BA14B
914C0F16DAE054B64E301B2863CBCFC499A22EE0D7B0A78E0F11F22E605A6C2A
A244E44546771CA79910349C2D0E87F288E8D04EAA867BC4DA6ACF2A9986FFBF
A76B2B7CD8FD7C4ED0FBB7DEFC0A0BAD0A56255003F8A9D002154AE55EF65113
7CD2E00DD026C10B5337B0FAA8278A57639B480C774EC5196C01927A9EDCA726
4D8F2D8FF7A3D5741EB51E3E2C963638740AE137B2CC69688D47F545CA42A978
DE57FE5E3C707D6C1FB41B0431AFCFE532C6DD668AC52624B8CE9C1EC35CC044
9B6DE44D39EDB251936AA43D99C73275223F3F33175885DB19A4B5E5F67F86A2
3636FD82C1024A2D5D52EE2C8AAFE3A261ADD3B4371091E6939E04CC5853F555
141C50C0FEAB2B5BED8D5E46A410257F4A0D81364EA222507A831201CCA0224B
5C96E4966496E818968C9F3B999D48EB19E3D0EB5B453375E6D266EAEB60045A
F2133E9F9086DF9E344FFCBC736CE7E9E617D33B1E1020B70E1B349E9328AE36
EADBA8632B29FD3E48D7EC751679CB8136D3CB86B0629EDA7F53AE315EC40B69
FDF89B76B31B54F16384D540EDC89765629CA0177AD22D39FF41D8D243B28D79
25960FA15EAD0AD822DC0498BE3983FB7D169C6CEECE30BD63534594E07E7738
76787620A3AB00BAB6D6C7EC1D2B8557C8300E69E3E4D0B126B5CC897D1736A8
E8FEDDB9D463C6CE5579B4A06E30900B19D0C6215BC0665B83DBAB6B139569DC
63146DC35970BEE9C1A462ED7FE27FCB45BC0D4CA38B2C90F24790F0F72AC718
47D6EF95DB72EEE3C0134C60D12F8333724F17F3932F92E07B56E87C749773DF
8AFB10EF2BADE73BDA38812EA0AF59634105214575F8FD2079D8789CFC369A68
0D3BB12F1DA84FC40DFB8532BADF8178091FE765FE15F621FB0891AEF3FC8594
1F42D636CCE34A7776F59DF54704CFF61FD395950788FCD1C4645C1684756930
CCBC642EBD5C0C658E9CF0D389D5DB4E9392891E41881F21B2E58E8304B98318
EF77BD2B0640A959FFABC805F2DB3122C598B50AECEC07EAD7B86E48DDBF6101
FDF6D544A30A7D83D3488C58C871CD50F6794F32BBAD29AF2DDBEBB8BEEF2F1A
521091A99314C35AD6DC906A32A3AB7EDAC820FDEC48CB6D8776E5709066BA56
EB6767CDC229EBF4664A62B713B42BBBFFF31FDF553546B03674F9D32F73D61A
E6D588E4EE07A9033510D75481831A51DD6D2D0A03069AF893B24815BFCCC1EF
50DF55020AA6C1DA9746347EE60EB8BE319B24D31556E2B7334AB800E0D97510
2AFE8D008341CC9EBBF2D391D5E0BBD8AB94089AF1F55E09A1C365D6D06DD06D
D3E867E36AE6364CE908AD0524B6C3A22940776F028BE99F379EE83D8FBA9369
C6D088149E5334B020C0B1CE49C5D96D0EB3A373793F065652FC14C9AE1D69C7
6EC592599C6CD9422D4DC0A5FE521032C26AC08DA988869993F40F2E0BA665B8
19DF73965F73858C6E4D555BFFA834807ACC07360D944875E8BC81D15DFCE1EA
CBAF858061E3E0D24AB9B36B59E48D67FAD9EEDA6AE55AF9DD47D5A48AE64EE4
552D2CF78D85BEBB05741C7EFD85AD4722C815D518740DF6DCBAF671656665DB
4F23E67D2EE2469AEF6E632DA06E3857B83AAB932DA010CCD4C323B19051892C
4A4BA462EE13F5F6D566CAC7DDAD045BFA9F100FBA3038484771C7DE3EF58CCC
0BA3A10E604BDE11B64AB16EAC004D4010536823675249F892375E91816BB5E4
F4BB2B9231BD3377C12D5971AC5D407B0E55D79FC47A64552D8C939362D7875D
B98F71367DB66B1851B95EAC16F8439B7F575545B85C44814BDCA57796C0F9C4
52F3BAF39F3E239DC8D6B51D9662EA20DF28C73173DE64F62DC3F8C61D1CFB67
D3E2268813AD4304E9EF3A3CA7FD38E7BA22D4D897C246DB2455F050F0588E16
AA5345C3B2781902219033F4D895CA689A74EFCE4E2502D73E24A811286145FD
EEF8C5D1EE63840DCC09B892EE917F8EEC42B6420394DF932F752E583E9E2980
E378EDA7C6DEF93EC540658A14CAF76BF15BA437B9F861FCD50BB3B36D863CF0
78429AE16B467747996B39BE33AE922435AA7A8D2533286AAEFCC802402D3098
F61F0B38AC8EBFBF9CF4930B21C07DFDFE06B17290DD08D09B7787DAA19F2901
B675D7C3A238921AEA7450A78E0817EF28FECED897795BFBB0070D60003F90D2
70605BD8BFB9892C94D339C883C7F22254698ECB425822652522F286BA5444D8
E944463AD7E8C4A8AF27F58069316ECF3E46B76BE8562D5AE4C53E86771CF2B1
C3FE51BBC0E26996BFBFC166EC4023666BC59C7A3CFE2987ADFCF5EB1E85D492
C0EC961C95527117BBD6A68665D77EAC53B8571FB546EC20687EE09B9BDFE1ED
55769BCDAA9FB8D04E3669F9882C23D14B2A1FAAA736FE7DD579CAD573EAF8EB
7EEC9014C0CCD7F2B411C2981887E502C38426777136C19B978EB11884F14722
0F8E975F5F6260E636F340031D90FC01FF2F00224607F47FE1109EC7BBE8E5B7
70678C0B20E9B99C611BEB8404E6CE7BC9555CAD91444FB140314C47CDC24231
E7DD6EC2F0D991293ACA1DE82F8DB5E31465076B0C90B032AF89DC0BBF9E57FF
FEA0A13C17C071175A4CB0C1605360E28B535F010581837314C92F9CE5E02FFB
48D6AC242B72EAD7AA745899C755220D4B41E68822D5DEA5AF6340D7E4800409
9E7A0B5794B9F36F0C307E517F7D519E13050ED8F6E13CDA7952FD2A0D886DB6
AFC8FF321D9F9AA990CC66DB01F72D63F6D93DEF03B78DB03BF3E745C7C96F9B
8C72B93324F315AD7FA5C9DFA715D5B906E97F4E3AA92C720DB5E3B3666F5A9C
9B4A66037C0DAA0549E9CC83BEF625415752652D5BC138C6922FFE0D1FC1420C
D8308C161DC30D13096EAE1A153A56F21CBC04F2B6C38D882E1C9B4C9343B8EB
0A0A52B76D7F857C89DC71D9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (research_plan_2013nov.dvi)
@start /Fa 134[42 1[60 42 46 28 32 37 1[46 42 46 69 23
46 1[23 46 42 28 37 46 37 46 42 10[60 1[55 46 60 1[51
65 1[78 55 2[32 2[51 1[60 60 1[60 12[42 42 42 42 2[21
28 45[{ TeXBase1Encoding ReEncodeFont }41 83.022 /NimbusRomNo9L-Medi
rf /Fb 138[55 33 39 44 2[50 55 1[28 55 33 28 55 50 1[44
55 44 55 50 9[100 2[66 3[61 2[94 66 24[50 50 50 49[{
 TeXBase1Encoding ReEncodeFont }25 99.6264 /NimbusRomNo9L-Medi
rf /Fc 139[25 29 33 14[33 42 37 31[54 18[19 46[{
 TeXBase1Encoding ReEncodeFont }8 74.7198 /NimbusRomNo9L-Medi
rf /Fd 135[45 2[45 45 4[45 45 45 3[45 45 2[45 45 2[45
32[45 17[45 46[{ TeXBase1Encoding ReEncodeFont }13 74.7198
/NimbusMonL-Regu rf /Fe 87[25 45[33 37 37 54 37 37 21
29 25 1[37 37 37 58 21 37 1[21 37 37 25 33 37 33 37 33
11[54 46 6[66 3[25 54 54 17[37 2[37 37 37 1[19 1[19 41[42
2[{ TeXBase1Encoding ReEncodeFont }38 74.7198 /NimbusRomNo9L-Regu
rf /Ff 138[42 5[42 42 4[23 1[42 5[37 8[60 15[60 72[{
 TeXBase1Encoding ReEncodeFont }8 83.022 /NimbusRomNo9L-Regu
rf /Fg 140[47 53 2[60 66 1[33 3[66 1[40 53 1[53 1[60
14[86 1[73 26[60 1[60 60 60 60 2[40 45[{ TeXBase1Encoding ReEncodeFont }
18 119.552 /NimbusRomNo9L-Medi rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 515 125
a
SDict begin H.S end
 515 125 a 515 125 a
SDict begin H.R end
 515 125 a 515 125 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 515 125 a 0
TeXcolorgray Black 523 365 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 523 365 a 523 365 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 523
365 a 0 TeXcolorgray 523 365 a
SDict begin [/Count -0/Dest (chapter.1) cvn/Title (Research Plan for 2013-2015)
/OUT pdfmark end
 523 365 a 523 365 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 523
365 a 523 365 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 523 365 a 523 365 a
SDict begin H.S end
 523 365 a 523 365
a
SDict begin 12 H.A end
 523 365 a 523 365 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 523 365 a 523 365 a
SDict begin H.S end
 523 365 a 523
365 a
SDict begin 12 H.A end
 523 365 a 523 365 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 523 365 a 523 365 a
SDict begin H.S end
 523 365
a 523 365 a
SDict begin 12 H.A end
 523 365 a 523 365 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.1) cvn /DEST pdfmark end
 523 365 a 0 TeXcolorgray
0 TeXcolorgray 1234 448 a Fg(Resear)n(ch)31 b(Plan)f(f)m(or)g
(2013-2015)1762 737 y Ff(Huang)19 b(Xiao)1619 911 y Fe(Institute)g(of)g
(Informatics)1315 1002 y(T)-5 b(echnische)20 b(Uni)n(v)o(ersit)t(\250)
-29 b(at)18 b(M)6 b(\250)-31 b(unchen,)21 b(German)o(y)1605
1094 y Fd(xiaohu@in.tum.de)p 0 TeXcolorgray 759 1906
a Fc(Abstract.)p 0 TeXcolorgray 41 w Fe(Here)k(I)g(summarize)g(the)g
(proposed)h(research)g(plan)f(for)g(the)f(upcoming)j(one)759
1997 y(year)m(,)e(and)h(it)e(is)h(possibly)h(e)o(xtended)g(till)e
(2015.)i(The)f(research)g(plan)h(is)e(supposed)j(to)e(be)759
2089 y(\002nally)g(presented)h(as)f(a)g(united)h(research)g(package)g
(co)o(v)o(ering)g(my)g(pre)n(vious)g(w)o(ork)f(as)h(a)759
2180 y(whole,)19 b(and)h(hopefully)g(the)f(plan)g(is)g(implemented)h
(as)f(my)g(doctoral)g(results)g(in)g(the)g(end.)523 2362
y
SDict begin H.S end
 523 2362 a 523 2362 a
SDict begin 12 H.A end
 523 2362 a 523 2362 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.1) cvn /DEST pdfmark
end
 523 2362
a 100 x Fb(1)99 b(Main)25 b(r)n(esear)n(ch)i(lines)d(in)h(Machine)h
(Lear)o(ning)523 2582 y
SDict begin H.S end
 523 2582 a 523 2582 a
SDict begin 12 H.A end
 523 2582
a 523 2582 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.1.1) cvn /DEST pdfmark
end
 523 2582 a 79 x Fa(1.1)82 b(Adv)o(ersarial)19
b(Machine)i(Lear)o(ning)523 2745 y
SDict begin H.S end
 523 2745 a 523 2745
a
SDict begin 12 H.A end
 523 2745 a 523 2745 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.1.2) cvn /DEST pdfmark
end
 523 2745 a 82 x Fa(1.2)82 b(Rob)n(ust)21
b(Lear)o(ning)f(Theory)523 2911 y
SDict begin H.S end
 523 2911 a 523 2911
a
SDict begin 12 H.A end
 523 2911 a 523 2911 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.1.3) cvn /DEST pdfmark
end
 523 2911 a 82 x Fa(1.3)82 b(Semi-super)o(vised)
21 b(Lear)o(ning)523 3077 y
SDict begin H.S end
 523 3077 a 523 3077 a
SDict begin 12 H.A end
 523
3077 a 523 3077 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.1.4) cvn /DEST pdfmark
end
 523 3077 a 82 x Fa(1.4)82 b(A)n(pplications)20
b(in)h(Anomaly)f(Detection)523 3243 y
SDict begin H.S end
 523 3243 a 523
3243 a
SDict begin 12 H.A end
 523 3243 a 523 3243 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.2) cvn /DEST pdfmark
end
 523 3243 a 99 x Fb(2)99
b(Pr)n(oject)26 b(bounded)h(W)-7 b(ork)523 3462 y
SDict begin H.S end
 523
3462 a 523 3462 a
SDict begin 12 H.A end
 523 3462 a 523 3462 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.2.1) cvn /DEST pdfmark
end
 523 3462 a 79
x Fa(2.1)82 b(De)o(v)o(elopment)19 b(of)h(VMI)i(Monitoring)d(Module)i
(in)g(ARAMiS)523 3625 y
SDict begin H.S end
 523 3625 a 523 3625 a
SDict begin 12 H.A end
 523 3625
a 523 3625 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.2.2) cvn /DEST pdfmark
end
 523 3625 a 82 x Fa(2.2)82 b(Machine)21 b(Lear)o(ning)f
(based)g(VMI)i(A)n(ppliances)523 3791 y
SDict begin H.S end
 523 3791 a 523
3791 a
SDict begin 12 H.A end
 523 3791 a 523 3791 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.2.3) cvn /DEST pdfmark
end
 523 3791 a 82 x Fa(2.3)82
b(Open)20 b(Framew)o(ork)g(of)g(Lear)o(ning)g(API)h(f)n(or)e(VMI)523
3957 y
SDict begin H.S end
 523 3957 a 523 3957 a
SDict begin 12 H.A end
 523 3957 a 523 3957 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.3) cvn /DEST pdfmark
end
 523
3957 a 99 x Fb(3)99 b(T)-9 b(eaching)26 b(based)g(Pr)n(ojects)523
4176 y
SDict begin H.S end
 523 4176 a 523 4176 a
SDict begin 12 H.A end
 523 4176 a 523 4176 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.3.1) cvn /DEST pdfmark
end
 523
4176 a 79 x Fa(3.1)82 b(Master)20 b(Thesis)i(T)-8 b(opics)21
b(Selected)523 4339 y
SDict begin H.S end
 523 4339 a 523 4339 a
SDict begin 12 H.A end
 523 4339
a 523 4339 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.3.2) cvn /DEST pdfmark
end
 523 4339 a 82 x Fa(3.2)82 b(Spatio-T)-8
b(emporal)19 b(Anomaly)h(Detection)523 4505 y
SDict begin H.S end
 523 4505
a 523 4505 a
SDict begin 12 H.A end
 523 4505 a 523 4505 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.3.3) cvn /DEST pdfmark
end
 523 4505 a 82 x Fa(3.3)82
b(Anomaly)19 b(Detection)h(Challenges)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
